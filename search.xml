<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Spring笔记-AOP</title>
    <url>/2020/08/13/Spring%E7%AC%94%E8%AE%B0-AOP/</url>
    <content><![CDATA[<blockquote>
<p>讲完上一篇的IOC，这一篇再来说说AOP，AOP即面向切面编程，我们都知道Java语言是面向对象编程，在工作中还听过面向接口编程，那么什么是面向切面编程呢？</p>
</blockquote>
<a id="more"></a>

<h1 id="Spring-AOP的个人理解"><a href="#Spring-AOP的个人理解" class="headerlink" title="Spring AOP的个人理解"></a>Spring AOP的个人理解</h1><p><strong>了解AOP之前先了解一下代理模式</strong></p>
<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>所谓代理模式，就是在调用方和真实处理对象方之间加一层代理对象。这样调用方不再调用我们的真实处理对象，改而调用我们的代理。这样的好处是：</p>
<ul>
<li>真实处理类就只需要关注我们的业务层实现，不需要关注细枝末节。</li>
<li>代理类类似于做了一层封装。封装我们的真实类，在此基础上，加上我们的细枝末节。</li>
<li>调用方实际调用起来，真实类和代理类的调用感觉不到任何差别。但我们可以在中间层代理类做更多细节的操作，这样就做到了真实调用方和真实处理类的解耦。</li>
</ul>
<p><strong>举个现实中的例子：</strong></p>
<p>通常我们租房都需要找中介，很少自己直接去找房东的。这样我们实现的调用关系为 ：租客-&gt;中介-&gt;房东</p>
<p>对于房东来说他是我们的真实处理类，房东更关心的点是签合同和收房租。但租房子除了签合同和收房租外，还需要看房子，谈价钱，交付钥匙等等手续。在这个示例中：签合同和收房租属于我们的核心业务，而谈价格，看房子等就属于我们的周边功能，细枝末节。因此我们的真实类只需要实现签合同和收房租方法，而让中介(也就是我们的代理)实现看房子，谈价钱，交付钥匙等方法。租客在实际调用中只需要调用中介包装过的方法即可。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建房东和中介共同的接口 定义了他们的行为，便于调用方调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建真实类 房东</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Landlord</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房东签合同了！！&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;房东收房租了！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建代理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProxy</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//被代理的实例</span></span><br><span class="line">    <span class="keyword">private</span> Rent rent;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRent</span><span class="params">(Rent rent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rent = rent;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介带你看房子了！！&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;中介和你谈价格了！！&quot;</span>);</span><br><span class="line">        rent.rent();</span><br><span class="line">        System.out.println(<span class="string">&quot;中介把钥匙交给你了！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *创建租客类 调用中介租房</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tenant</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyProxy myProxy = <span class="keyword">new</span> MyProxy();</span><br><span class="line">        myProxy.setRent(<span class="keyword">new</span> Landlord());</span><br><span class="line">        myProxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>实际执行结果</p>
<p><img data-src="Spring%E7%AC%94%E8%AE%B0-AOP.assets%5Cimage-20200605174144551.png" alt="image-20200605174144551"></p>
<p>上面就是Java的代理模式</p>
<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>AOP的全称叫做 <strong>Aspect Oriented Program 面向切面编程</strong></p>
<p>先进行几个定义：</p>
<ul>
<li>核心业务功能：即业务处理时实际关心的操作，比如增删改查</li>
<li>周边功能：在写业务代码时附属的功能，比如日志，事务管理等。</li>
</ul>
<p>在AOP的思想里，周边功能叫做切面，核心业务需要和切面分开独立开发。然后再将切面功能与核心业务编织在一起，这就叫AOP。</p>
<p>AOP能够将那些与业务无关，<strong>却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来</strong>，便于<strong>减少系统的重复代码</strong>，<strong>降低模块间的耦合度</strong>，并<strong>有利于未来的可拓展性和可维护性</strong>。</p>
<p>AOP里面的几个概念：</p>
<ul>
<li>切入点：即调用切面的地方，在某个类的某个方法内调切面。(where)</li>
<li>通知，在切入点的什么时间，执行什么操作。比如在删除数据(切入点)里，业务执行之前(时间)加入日志操作(操作)  (when and where)</li>
<li>切面：切入点加通知即为切面(在什么地方，什么时间，做什么事)。这样，实际开发中，我们可以独立开发切面模块。</li>
<li>织入：将切面加入对象，并创建出代理对象的过程。</li>
</ul>
<p><strong>还拿刚才租房举例子</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yhs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/5 15:51</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 实际业务类 不关心其他</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Landlord</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;签合同&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;收房租&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coderzoe.demo5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yhs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/5 15:54</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 切面类 即我们的代理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Section</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.coderzoe.demo5.Landlord.rent())&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;带租客看房！！&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;谈价钱！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.coderzoe.demo5.Landlord.rent())&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;交钥匙&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coderzoe.demo5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yhs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/5 16:04</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        Landlord landlord = context.getBean(<span class="string">&quot;landlord&quot;</span>, Landlord.class);</span><br><span class="line">        landlord.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>运行结果：</p>
<p><img data-src="C:\Users\90617\AppData\Roaming\Typora\typora-user-images\image-20200605174144551.png" alt="image-20200605174144551"></p>
<p>这里的Section与我们之前的代理类MyProxy所作的工作一样，不过更通用和简洁。</p>
<p>在切面类中，我们指定了切入点( com.coderzoe.demo5.Landlord.rent() )，同时我们指定了通知@Before和before函数，@After和after函数</p>
<p>通过上面我们可以知道切面=切入点+通知，这样我们就创建了一个切面类，他完全独立于我们的实际业务类，只做切入操作。这样也不难理解，核心功能和周边功能可以独立开发。</p>
<p><strong>注意</strong></p>
<p>AOP的使用除了spring-aop包以外，还需要aspectjrt和aspectjweaver依赖</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.2.6.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;aspectj&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;aspectjrt&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.5.4&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.aspectj&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.9.5&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习笔记</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>AOP</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记-IOC</title>
    <url>/2020/08/13/Spring%E7%AC%94%E8%AE%B0-IOC/</url>
    <content><![CDATA[<blockquote>
<p>Spring两大核心：IOC和AOP，其中IOC即控制反转，其思想本质是设计模式中的工厂模式。<br>学习Spring，也就是理解这两大思想。本文就是个人对IOC的理解。</p>
</blockquote>
<a id="more"></a>
<h1 id="个人关于IOC的理解"><a href="#个人关于IOC的理解" class="headerlink" title="个人关于IOC的理解"></a>个人关于IOC的理解</h1><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><p>IOC即控制反转(Inversion of Control)</p>
<p>了解控制反转前我们先了解下正常逻辑的思路：</p>
<blockquote>
<p>我需要某个类，我创建了这个类。  </p>
</blockquote>
<p>但控制反转正好反过来：</p>
<blockquote>
<p>类的创建不再由你实现，创建对象的控制权，由你转交给了第三双方容器，你如果需要它，那你就去找第三方容器要，容器已经创建好了。</p>
</blockquote>
<p><strong>举个现实中的例子：</strong></p>
<blockquote>
<p>你今天很渴，你想要喝一杯橙汁，如果按正常开发思路，那这杯橙汁的控制权在我，我需要橙汁，我就去创造一个橙汁，我买橙子，买白砂糖，买榨汁机，烧热水，准备制造橙汁。但我们都知道，现实生活中不是这样的，我渴了，需要一杯橙汁，我只需要找家商场购买橙汁，橙汁是商店(或制造商)制造的，我只需要取来用。这个例子就实现了控制反转，我需要橙汁，但我不创建，橙汁的创建是第三方商家创建的，我不需要关心，只需要拿来用即可。</p>
</blockquote>
<h2 id="DI"><a href="#DI" class="headerlink" title="DI"></a>DI</h2><p> DI即依赖注入(Dependency Injection)，他是控制反转的一种实现方式。</p>
<p>依赖注入分为两个词：<strong>依赖</strong>和<strong>注入</strong>。</p>
<blockquote>
<p>所谓依赖就是我的实现需要依赖于你，我渴了需要一杯橙汁，那么此时我们就可以说我依赖橙汁，或者说我要解决我渴这个问题需要依赖橙汁。</p>
</blockquote>
<blockquote>
<p>而注入是说将你所需的这个依赖注入到自己的类中，通过注入的方式来获得依赖。</p>
</blockquote>
<p>举个例子  </p>
<blockquote>
<p>公司想让你给每个类加个日志 然后需要这些日志输出到文件里<br>这时你可以简单暴力的做，在每个类加一个FileLog的对象，让这个对象去执行日志的输出</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service1</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ILogger logger = <span class="keyword">new</span> FileLogger();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.log(<span class="string">&quot;执行增加函数!!&quot;</span>);</span><br><span class="line">        <span class="comment">//statement</span></span><br><span class="line">        logger.log(<span class="string">&quot;增加函数执行完成!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.log(<span class="string">&quot;执行删除函数!!&quot;</span>);</span><br><span class="line">        <span class="comment">//statement</span></span><br><span class="line">        logger.log(<span class="string">&quot;删除函数执行完成!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.log(<span class="string">&quot;执行修改函数!!&quot;</span>);</span><br><span class="line">        <span class="comment">//statement</span></span><br><span class="line">        logger.log(<span class="string">&quot;修改函数执行完成!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.log(<span class="string">&quot;执行查询函数!!&quot;</span>);</span><br><span class="line">        <span class="comment">//statement</span></span><br><span class="line">        logger.log(<span class="string">&quot;查询函数执行完成!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceN</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ILogger logger = <span class="keyword">new</span> FileLogger();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.log(<span class="string">&quot;执行增加函数!!&quot;</span>);</span><br><span class="line">        <span class="comment">//statement</span></span><br><span class="line">        logger.log(<span class="string">&quot;增加函数执行完成!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.log(<span class="string">&quot;执行删除函数!!&quot;</span>);</span><br><span class="line">        <span class="comment">//statement</span></span><br><span class="line">        logger.log(<span class="string">&quot;删除函数执行完成!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.log(<span class="string">&quot;执行修改函数!!&quot;</span>);</span><br><span class="line">        <span class="comment">//statement</span></span><br><span class="line">        logger.log(<span class="string">&quot;修改函数执行完成!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.log(<span class="string">&quot;执行查询函数!!&quot;</span>);</span><br><span class="line">        <span class="comment">//statement</span></span><br><span class="line">        logger.log(<span class="string">&quot;查询函数执行完成!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样你在n个类里加了日志功能，输出到文件。</p>
<p> 突然有一天需求变了，不再是输出到文件了，要求输出到控制台，这时你不可能去替换每个类里的log，而且就算这次全替换了，下次再改成打印输出到服务器怎么办？<br>之所以这里每个类都需要改，是因为我们每个类依赖的日志功能都自己去实现了，那我们可不可以不自己实现，实现由统一的地方来控制。这样改的时候，我只需要改统一的地方就好了。</p>
<p>这就是<strong>工厂设计模式</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service1</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ILogger logger = LoggerFactory.createLogger();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.log(<span class="string">&quot;执行增加函数!!&quot;</span>);</span><br><span class="line">        <span class="comment">//statement</span></span><br><span class="line">        logger.log(<span class="string">&quot;增加函数执行完成!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.log(<span class="string">&quot;执行删除函数!!&quot;</span>);</span><br><span class="line">        <span class="comment">//statement</span></span><br><span class="line">        logger.log(<span class="string">&quot;删除函数执行完成!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.log(<span class="string">&quot;执行修改函数!!&quot;</span>);</span><br><span class="line">        <span class="comment">//statement</span></span><br><span class="line">        logger.log(<span class="string">&quot;修改函数执行完成!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.log(<span class="string">&quot;执行查询函数!!&quot;</span>);</span><br><span class="line">        <span class="comment">//statement</span></span><br><span class="line">        logger.log(<span class="string">&quot;查询函数执行完成!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceN</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ILogger logger = LoggerFactory.createLogger();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.log(<span class="string">&quot;执行增加函数!!&quot;</span>);</span><br><span class="line">        <span class="comment">//statement</span></span><br><span class="line">        logger.log(<span class="string">&quot;增加函数执行完成!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.log(<span class="string">&quot;执行删除函数!!&quot;</span>);</span><br><span class="line">        <span class="comment">//statement</span></span><br><span class="line">        logger.log(<span class="string">&quot;删除函数执行完成!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.log(<span class="string">&quot;执行修改函数!!&quot;</span>);</span><br><span class="line">        <span class="comment">//statement</span></span><br><span class="line">        logger.log(<span class="string">&quot;修改函数执行完成!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.log(<span class="string">&quot;执行查询函数!!&quot;</span>);</span><br><span class="line">        <span class="comment">//statement</span></span><br><span class="line">        logger.log(<span class="string">&quot;查询函数执行完成!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggerFactory</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ILogger <span class="title">createLogger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ServerLogger();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看，这样我们就实现了<strong>控制反转</strong>，将log的创建不交给每个类来具体实现，而交给一个统一的第三方来实现。我们只需要找第三方要就好了，他给我们造。这样我们需求改了的时候，只需要改工厂方法即可。</p>
<p>但这样又会有问题：每一个类都需要日志功能，每一个类都需要第三方来new一个日志类，但其实每个日志类并没什么不同，这样会造成大量重复的日志类占用资源。那我可不可以将日志类设计为单例的呢？所有的创建都是来自同一个日志类。当然可以。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggerFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ILogger logger = <span class="keyword">new</span> ServerLogger();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ILogger <span class="title">createLogger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> logger ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样我们就只创建了一个日志对象，每次返回的都是他。</p>
<p>但很多时候，我们的需求是变动的不可预测的，如果这时候又有其他的依赖需要的不是单例，而是原型，那我们又得改。此时我们就引入了Spring<br>在Spring中，我们将依赖类进行托管，控制权交给Spring，我们只需要在每个类里注入依赖类即可 这样的好处前面也说了，我们并不关心这个依赖是怎么构建的或有没有，也不需要在我的代码里new一个依赖，我只需要直接拿来用即可 。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service1</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ILogger logger;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.log(<span class="string">&quot;执行增加函数!!&quot;</span>);</span><br><span class="line">        <span class="comment">//statement</span></span><br><span class="line">        logger.log(<span class="string">&quot;增加函数执行完成!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.log(<span class="string">&quot;执行删除函数!!&quot;</span>);</span><br><span class="line">        <span class="comment">//statement</span></span><br><span class="line">        logger.log(<span class="string">&quot;删除函数执行完成!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.log(<span class="string">&quot;执行修改函数!!&quot;</span>);</span><br><span class="line">        <span class="comment">//statement</span></span><br><span class="line">        logger.log(<span class="string">&quot;修改函数执行完成!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.log(<span class="string">&quot;执行查询函数!!&quot;</span>);</span><br><span class="line">        <span class="comment">//statement</span></span><br><span class="line">        logger.log(<span class="string">&quot;查询函数执行完成!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;serverLogger&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.springnovel.perfectlogger.ServerLogger&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;Service1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.coderzoe.service.Service1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;logger&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;serverLogger&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样我们的类就只需要引入依赖，具体的创建和赋值，Spring帮你做好了(但你得在xml或注解中配置)</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>IOC</tag>
      </tags>
  </entry>
  <entry>
    <title>Http与Servlet</title>
    <url>/2020/08/07/Http%E4%B8%8EServlet/</url>
    <content><![CDATA[<blockquote>
<p>Servlet是JavaWeb的核心，所谓Servlet就是实现Servlet接口的Java类。前端的每一个动态请求(非静态资源请求)，都会交给后端的Servlet处理。而Http是前后端沟通的最重要的协议。</p>
</blockquote>
<a id="more"></a>

<h1 id="Servlet笔记"><a href="#Servlet笔记" class="headerlink" title="Servlet笔记"></a>Servlet笔记</h1><h2 id="1-Tomcat"><a href="#1-Tomcat" class="headerlink" title="1. Tomcat"></a>1. Tomcat</h2><p>Tomcat的功能：</p>
<blockquote>
<ul>
<li>Web服务器</li>
<li>JSP/Servlet容器 </li>
</ul>
</blockquote>
<p>浏览器请求服务器所做的工作：</p>
<p>浏览器 -&gt; 本地host/DNS-&gt;目的服务器-&gt;JSP/Servlet-&gt;数据库</p>
<p>这是早期的JavaWeb架构，所有的请求交由JSP/Servlet来处理。</p>
<h2 id="2-HTTP协议"><a href="#2-HTTP协议" class="headerlink" title="2. HTTP协议"></a>2. HTTP协议</h2><p><strong>HTTP协议：</strong></p>
<blockquote>
<p>超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议。所有的WWW文件都必须遵守这个标准。它是TCP/IP协议的一个<strong>应用层协议</strong></p>
</blockquote>
<p><strong>简单来说，HTTP协议就是客户端和服务器交互的一种通讯格式。</strong></p>
<p>一般客户端发起一个HTTP请求到服务端，服务端进行请求处理，处理完成后，封装一个HTTP响应给客户端(浏览器)。</p>
<h3 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h3><p>一个HTTP请求包含三个部分：</p>
<ul>
<li><ol>
<li>请求行 (描述客户端的<strong>请求方式</strong>、<strong>请求的资源名称</strong>，以及使用的<strong>HTTP协议版本号</strong>)</li>
</ol>
</li>
<li><ol start="2">
<li>请求头 (描述客户端请求哪台主机，以及<strong>客户端的一些环境信息</strong>等)</li>
</ol>
</li>
<li><ol start="3">
<li>一个空行</li>
</ol>
</li>
<li><ol start="4">
<li>请求实体</li>
</ol>
</li>
</ul>
<p>HTTP请求行：一个HTTP请求行包含请求方法，请求资源的路径，HTTP协议版本    </p>
<blockquote>
<p>GET /java.html HTTP/1.1</p>
</blockquote>
<p>HTT请求方法包含：<strong>POST,GET,HEAD,OPTIONS,DELETE,TRACE,PUT</strong> </p>
<blockquote>
<ul>
<li>GET： 用于请求访问已经被URI（统一资源标识符）识别的资源，可以通过URL传参给服务器</li>
<li>POST：用于传输信息给服务器，主要功能与GET方法类似，但一般推荐使用POST方式。</li>
<li>PUT： 传输文件，报文主体中包含文件内容，保存到对应URI位置。</li>
<li>HEAD： 获得报文首部，与GET方法类似，只是不返回报文主体，一般用于验证URI是否有效。</li>
<li>DELETE：删除文件，与PUT方法相反，删除对应URI位置的文件。</li>
<li>OPTIONS：查询相应URI支持的HTTP方法。</li>
</ul>
</blockquote>
<p>HTTP请求头：</p>
<blockquote>
<ul>
<li>Accept: text/html,image/*    【浏览器告诉服务器，它支持的数据类型】</li>
<li>Accept-Charset: ISO-8859-1    【浏览器告诉服务器，它支持哪种<strong>字符集</strong>】</li>
<li>Accept-Encoding: gzip,compress 【浏览器告诉服务器，它支持的<strong>压缩格式</strong>】</li>
<li>Accept-Language: en-us,zh-cn 【浏览器告诉服务器，它的语言环境】</li>
<li>Host: <span class="exturl" data-url="d3d3Lml0MzE1Lm9yZzo4MA==">www.it315.org:80<i class="fa fa-external-link-alt"></i></span>【浏览器告诉服务器，它的想访问哪台主机】</li>
<li>If-Modified-Since: Tue, 11 Jul 2000 18:23:51 GMT【浏览器告诉服务器，缓存数据的时间】</li>
<li>Referer: <span class="exturl" data-url="aHR0cDovL3d3dy5pdDMxNS5vcmcvaW5kZXguanNwJUUzJTgwJTkwJUU2JUI1JThGJUU4JUE3JTg4JUU1JTk5JUE4JUU1JTkxJThBJUU4JUFGJTg5JUU2JTlDJThEJUU1JThBJUExJUU1JTk5JUE4JUVGJUJDJThDJUU1JUFFJUEyJUU2JTg4JUI3JUU2JTlDJUJBJUU2JTk4JUFGJUU0JUJCJThFJUU5JTgyJUEzJUU0JUI4JUFBJUU5JUExJUI1JUU5JTlEJUEyJUU2JTlEJUE1JUU3JTlBJTg0LS0tKiolRTUlOEYlOEQlRTclOUIlOTclRTklOTMlQkUqKiVFMyU4MCU5MQ==">http://www.it315.org/index.jsp【浏览器告诉服务器，客户机是从那个页面来的---**反盗链**】<i class="fa fa-external-link-alt"></i></span></li>
<li>8.User-Agent: Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 5.0)【浏览器告诉服务器，浏览器的内核是什么】</li>
<li>Cookie【浏览器告诉服务器，<strong>带来的Cookie是什么</strong>】</li>
<li>Connection: close/Keep-Alive  【浏览器告诉服务器，请求完后是断开链接还是保持链接】 </li>
<li>Date: Tue, 11 Jul 2000 18:23:51 GMT【浏览器告诉服务器，请求的时间】 </li>
</ul>
</blockquote>
<h3 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h3><p>一个完整的HTTP响应应该包含四个部分:</p>
<ul>
<li><ol>
<li>一个状态行【用于描述<strong>服务器对请求的处理结果。</strong>】</li>
</ol>
</li>
<li><ol start="2">
<li>响应头【用于描述<strong>服务器的基本信息</strong>，以及<strong>数据的描述</strong>，<strong>服务器通过这些数据的描述信息，可以通知客户端如何处理等一会儿它回送的数据</strong>】</li>
</ol>
</li>
<li><ol start="3">
<li>一个空行</li>
</ol>
</li>
<li><ol start="4">
<li>响应实体【<strong>服务器向客户端回送的数据</strong>】</li>
</ol>
</li>
</ul>
<p>状态行：</p>
<blockquote>
<ul>
<li>100~199 表示成功接受请求，要求客户端继续提交下一次请求才能完成整个处理过程</li>
<li>200~299 表示成功接收请求并已完成整个处理过程。</li>
<li>300~399 表示请求的资源已经移动到一个新的地址(跳转)</li>
<li>400~499 客户端请求出错</li>
<li>500~599 服务器出现错误</li>
</ul>
</blockquote>
<p>响应头：</p>
<blockquote>
<ul>
<li>Location: <span class="exturl" data-url="aHR0cDovL3d3dy5pdDMxNS5vcmcvaW5kZXguanNw">http://www.it315.org/index.jsp<i class="fa fa-external-link-alt"></i></span> 【服务器告诉浏览器<strong>要跳转到哪个页面</strong>】</li>
<li>Server:apache tomcat【服务器告诉浏览器，服务器的型号是什么】</li>
<li>Content-Encoding: gzip 【服务器告诉浏览器<strong>数据压缩的格式</strong>】</li>
<li>Content-Length: 80 【服务器告诉浏览器回送数据的长度】</li>
<li>Content-Language: zh-cn 【服务器告诉浏览器，服务器的语言环境】</li>
<li>Content-Type: text/html; charset=GB2312 【服务器告诉浏览器，<strong>回送数据的类型</strong>】</li>
<li>Last-Modified: Tue, 11 Jul 2000 18:23:51 GMT【服务器告诉浏览器该资源上次更新时间】</li>
<li>Refresh: 1;url=<span class="exturl" data-url="aHR0cDovL3d3dy5pdDMxNS5vcmfjgJDmnI3liqHlmajlkYror4nmtY/op4jlmajopoEqKuWumuaXtuWIt+aWsCoq44CRLw==">http://www.it315.org【服务器告诉浏览器要**定时刷新**】<i class="fa fa-external-link-alt"></i></span></li>
<li>Content-Disposition: attachment; filename=aaa.zip【服务器告诉浏览器<strong>以下载方式打开数据</strong>】</li>
<li>Transfer-Encoding: chunked  【服务器告诉浏览器数据以分块方式回送】</li>
<li>Set-Cookie:SS=Q0=5Lb_nQ; path=/search【服务器告诉浏览器要<strong>保存Cookie</strong>】</li>
<li>Expires: -1【服务器告诉浏览器<strong>不要设置缓存</strong>】</li>
<li>Cache-Control: no-cache  【服务器告诉浏览器<strong>不要设置缓存</strong>】</li>
<li>Pragma: no-cache   【服务器告诉浏览器<strong>不要设置缓存</strong>】</li>
<li>Connection: close/Keep-Alive   【服务器告诉浏览器连接方式】</li>
<li>Date: Tue, 11 Jul 2000 18:23:51 GMT【服务器告诉浏览器回送数据的时间】</li>
</ul>
</blockquote>
<p><strong>HTTP是无状态协议</strong>：</p>
<blockquote>
<p>无状态协议对于事务处理没有记忆能力<strong>。</strong>缺少状态意味着如果后续处理需要前面的信息 。也就是说，当客户端一次HTTP请求完成以后，客户端再发送一次HTTP请求，HTTP并不知道当前客户端是一个”老用户“。</p>
</blockquote>
<p><strong>HTTP通过Cookie来解决这个问题。</strong></p>
<p><strong>一次HTTP连接：</strong></p>
<blockquote>
<p>建立TCP连接-&gt;客户端发送请求行-&gt;客户端发送请求头-&gt;服务器</p>
<p>服务器发送状态行-&gt;服务器发送响应头-&gt;服务器发送响应体-&gt;TCP连接断开</p>
</blockquote>
<h2 id="3-Servlet"><a href="#3-Servlet" class="headerlink" title="3. Servlet"></a>3. Servlet</h2><p><strong>什么是Servlet？</strong></p>
<blockquote>
<p>Servlet就是实现了Servlet接口的Java类。Servlet是由服务器调用，运行在服务器端。</p>
</blockquote>
<h3 id="Servlet接口"><a href="#Servlet接口" class="headerlink" title="Servlet接口"></a>Servlet接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig var1)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest var1, ServletResponse var2)</span> <span class="keyword">throws</span> ServletException, IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function">ServletConfig <span class="title">getServletConfig</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function">String <span class="title">getServletInfo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h3><ol>
<li><p>加载Servlet：当Tomcat第一次访问Servlet的时候，Tomcat会负责创建Servlet的实例</p>
</li>
<li><p>初始化：当Servlet被实例化后，Tomcat会调用init()方法初始化这个对象</p>
</li>
<li><p>处理服务：当浏览器访问Servlet的时候，Servlet 会调用service()方法处理请求</p>
</li>
<li><p>销毁：当Tomcat关闭时或者检测到Servlet要从Tomcat删除的时候会自动调用destroy()方法，让该实例释放掉所占的资源。一个Servlet如果长时间不被使用的话，也会被Tomcat自动销毁</p>
</li>
<li><p>卸载：当Servlet调用完destroy()方法后，等待垃圾回收。如果有需要再次使用这个Servlet，会重新调用init()方法进行初始化操作。</p>
</li>
</ol>
<p>通过上面我们可以学习到：</p>
<ul>
<li><strong>只要访问Servlet，service()就会被调用。init()只有第一次访问Servlet的时候才会被调用。destroy()只有在Tomcat关闭的时候才会被调用</strong></li>
<li><strong>Servlet是单例加载，浏览器会对Servlet进行多次请求 一般情况下服务器只创建一个Servlet对象 Servlet对象一旦创建 就会驻留在内存中。浏览器的每次请求访问都会创建一个新的HttpServletRequest和HttpServletResponse 然后将这两个对象传给Servlet的service方法</strong></li>
<li><strong>当多个用户访问同一Servlet资源时 服务器会为每个用户创建一个线程 这可能出现线程安全问题 需要用syn进行同步锁</strong></li>
</ul>
<h3 id="HttpServlet"><a href="#HttpServlet" class="headerlink" title="HttpServlet"></a>HttpServlet</h3><p>我们可以看到Servlet接口包含五个方法，如果我们每个Servlet都实现这个接口的话，势必会非常繁琐，所以Java帮我们做了一层封装，我们只需要继承<strong>HttpServlet</strong>父类即可。</p>
<p>HttpServlet类继承了Servlet接口，同时帮我们重写了接口方法，并且在service方法处理中，根据请求类型，创建了不同的响应方法，我们只需要根据自己的需要，重写父类里的响应方法即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String returnMsg = <span class="string">&quot;hello man we see again, i am get&quot;</span>;</span><br><span class="line">        OutputStream outputStream = resp.getOutputStream();</span><br><span class="line">        outputStream.write(returnMsg.getBytes());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;hello man we see again, i am post&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Servlet-Mapping"><a href="#Servlet-Mapping" class="headerlink" title="Servlet Mapping"></a>Servlet Mapping</h3><p>一个Servlet的创建不光要继承HttpServlet(Servlet接口)，还要给出自己的Servlet映射。</p>
<p>试想这样一种情况：</p>
<p>你写了一个Servlet来处理用户下载QQ，这时客户端发送HTTP请求，HTTP请求会包含一个请求资源路径(URL链接)，服务器想去解析这个URI链接，以此来找到这是对应Web服务中的哪一个Servlet，找到后，再调用你这个Servlet处理用户的请求，但如果你没有写Servlet映射，Web服务器就找不到你的Servlt，自然也无法处理用户的请求。</p>
<p>所以Servlet映射的作用就是将URL路径与你的Servlet对应起来，类似于一张对应表，这样用户一请求，就能通过这个表找到是哪个Servlet。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>myServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>Servlet.MyServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>myServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/myServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h3><p>一些通用的Servlet初始化配置，比如你可以将JDBC的一些参数放到ServletConfig中，这样在每个Servlet中可以直接拿来用，而且因为在web.xml中配置，修改也简单，不用动代码。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/smbms?useSSL=false<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>password<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletConfig servletConfig = <span class="keyword">this</span>.getServletConfig();</span><br><span class="line">        String url = servletConfig.getInitParameter(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        String userName = servletConfig.getInitParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password = servletConfig.getInitParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="ServletContext（重点）"><a href="#ServletContext（重点）" class="headerlink" title="ServletContext（重点）"></a>ServletContext（重点）</h3><p><strong>ServletContext</strong>代表着当前Web站点。</p>
<p>这样说可能难以理解，我们可以换种说法：ServletContext是你Web项目的<strong>全局变量</strong>。每个Servlet都可以访问ServletContext，当然访问的也是同一个ServletContext，这样我们的Servlet就可以通过ServletContext实现交互。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletContext1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;coderZoe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletContext2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String name = servletContext.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a>HttpServletResponse</h3><p>HttpServletResponse代表HTTP响应，通常我们可以将返回信息通过输出流要返给客户端。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Servlet1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletOutputStream servletOutputStream = response.getOutputStream();</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;text/html;charset = UTF-8&quot;</span>);</span><br><span class="line">        servletOutputStream.write(<span class="keyword">new</span> String(<span class="string">&quot;Hello 客户端&quot;</span>).getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Servlet2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">       response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        PrintWriter printWriter = response.getWriter();</span><br><span class="line">        printWriter.write(<span class="string">&quot;Hello 客户端&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong></p>
<blockquote>
<ul>
<li>getWriter()和getOutputStream()两个方法不能同时调用。如果同时调用就会出现异常</li>
<li>Servlet程序向ServletOutputStream或PrintWriter对象中写入的数据将被Servlet引擎从response里面获取，Servlet引擎将这些数据当作响应消息的正文，然后再与响应状态行和各响应头组合后输出到客户端。</li>
<li>Servlet的serice()方法结束后【也就是doPost()或者doGet()结束后】，Servlet引擎将检查getWriter或getOutputStream方法返回的输出流对象是否已经调用过close方法，如果没有，Servlet引擎将调用close方法关闭该输出流对象.</li>
</ul>
</blockquote>
<p>通过输出流完成文件下载</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String path = <span class="keyword">this</span>.getServletContext().getRealPath(<span class="string">&quot;/WEB-INF/resource/picture/西电.jpeg&quot;</span>);</span><br><span class="line">        String fileName = path.substring(path.lastIndexOf(<span class="string">&quot;\\&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//告诉浏览器这是一个下载请求</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=&quot;</span>+ URLEncoder.encode(fileName,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        <span class="keyword">try</span>(FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">            ServletOutputStream servletOutputStream = response.getOutputStream();) &#123;</span><br><span class="line">            <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span> ((len = fileInputStream.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                servletOutputStream.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现页面自动刷新</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Refresh</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 以规定的时间让页面自动刷新</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        response.getWriter().write(<span class="string">&quot;3秒后页面将跳转&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置3秒后跳转</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;Refresh&quot;</span>,<span class="string">&quot;3;url = &#x27;/JavaWebLearn/index.jsp&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置取消缓存</span></span><br><span class="line">        response.setDateHeader(<span class="string">&quot;Expires&quot;</span>,-<span class="number">1</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Cache-Control&quot;</span>,<span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Pragma&quot;</span>,<span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>压缩</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Compression</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//对数据进行压缩 返给浏览器 浏览器再进行解码展示</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//gzip函数是一种压缩方式 他通过接受源数据的字节流，将源数据字节流写到一个字节输出流内 可以看出gzip是属于IO装饰流</span></span><br><span class="line">        ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        GZIPOutputStream gzipOutputStream = <span class="keyword">new</span> GZIPOutputStream(byteArrayOutputStream);</span><br><span class="line">        String path = <span class="keyword">this</span>.getServletContext().getRealPath(<span class="string">&quot;/WEB-INF/resource/picture/西电.jpeg&quot;</span>);</span><br><span class="line">        FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len = inputStream.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            gzipOutputStream.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//取出gzip写入后压缩的字节 传给浏览器</span></span><br><span class="line">        <span class="keyword">byte</span>[] result = byteArrayOutputStream.toByteArray();</span><br><span class="line">        System.out.println(result.length);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//告诉浏览器压缩格式 用于浏览器解析</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Encoding&quot;</span>,<span class="string">&quot;gzip&quot;</span>);</span><br><span class="line">        response.getOutputStream().write(result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        inputStream.close();</span><br><span class="line">        gzipOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>重定向跳转</strong></p>
<blockquote>
<p>什么是重定向跳转呢？点击一个超链接，<strong>通知浏览器跳转到另外的一个页面</strong>就叫重定向跳转。<strong>是通知浏览器去跳转，这很重要。</strong>页面之间的跳转有两种方式：<strong>重定向和转发</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Redirect</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//当请求这个Servlet时，重定向到index页面</span></span><br><span class="line">        response.sendRedirect(<span class="string">&quot;/JavaWebLearn/index.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="HttpServletRequest"><a href="#HttpServletRequest" class="headerlink" title="HttpServletRequest"></a>HttpServletRequest</h3><p>HttpServletRequest对象代表客户端的请求，我们可以通过这个对象获得浏览器信息和请求时发过来的数据</p>
<ol>
<li><p>浏览器信息</p>
<blockquote>
<ul>
<li>getRequestURL方法返回客户端发出请求时的完整URL。</li>
<li>getRequestURI方法返回请求行中的资源名部分。</li>
<li>getQueryString 方法返回请求行中的参数部分。</li>
<li>getPathInfo方法返回请求URL中的额外路径信息。额外路径信息是请求URL中的位于Servlet的路径之后和查询参数之前的内容，它以“/”开头。</li>
<li>getRemoteAddr方法返回发出请求的客户机的IP地址</li>
<li>getRemoteHost方法返回发出请求的客户机的完整主机名</li>
<li>getRemotePort方法返回客户机所使用的网络端口号</li>
<li>getLocalAddr方法返回WEB服务器的IP地址。</li>
<li>getLocalName方法返回WEB服务器的主机名</li>
</ul>
</blockquote>
</li>
<li><p>请求头</p>
<blockquote>
<ul>
<li>getHeader方法</li>
<li>getHeaders方法</li>
<li>getHeaderNames方法</li>
</ul>
</blockquote>
</li>
<li><p>请求参数</p>
<blockquote>
<ul>
<li>getParameter方法</li>
<li>getParameterValues（String name）方法</li>
<li>getParameterNames方法</li>
<li>getParameterMap方法</li>
</ul>
</blockquote>
</li>
</ol>
<p>防盗链</p>
<blockquote>
<p>简单来说防盗链就是你如果想访问xxx资源网页，你就必须从yyy网页跳转过来，通过别的跳转过来(或直接URL请求)不行，我会重定向，让你回到yyy网页</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Referer</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//防盗链</span></span><br><span class="line">        <span class="comment">//通过request的header信息判断访问当前网页的来源 如果不是由导航窗口进来 那就直接跳转回导航窗口 让用户再点一遍</span></span><br><span class="line">        <span class="comment">//得到网站的来源并进行判断</span></span><br><span class="line">        String referer = request.getHeader(<span class="string">&quot;Referer&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(referer==<span class="keyword">null</span>||!referer.contains(<span class="string">&quot;http://localhost:8080/JavaWebLearn/index.jsp&quot;</span>))&#123;</span><br><span class="line">            response.sendRedirect(<span class="string">&quot;/JavaWebLearn/index.jsp&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html; charset = UTF-8&quot;</span>);</span><br><span class="line">        response.getWriter().write(<span class="string">&quot;这是我的资源页 你只能通过首页跳转过来&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>表单数据提交</p>
<p>HTML(JSP)页面写一个表单，表单请求指向我们的Servlet，在Servlet通过HttpServletRequest类获得用户表单传递的参数。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/JavaWebLearn/form&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">  &lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">      &lt;td&gt;用户名&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;&lt;input type=&quot;text&quot; name = &quot;userName&quot;&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">      &lt;td&gt;密码&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;&lt;input type=&quot;password&quot; name = &quot;password&quot;&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">      &lt;td&gt;性别&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;&lt;input type=&quot;radio&quot; name = &quot;sex&quot; value=&quot;男&quot;&gt;男&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;女&quot;&gt;女&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">      &lt;td&gt;爱好&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;&lt;input type=&quot;checkbox&quot; name=&quot;hobbies&quot; value=&quot;打球&quot;&gt;打球&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;&lt;input type=&quot;checkbox&quot; name=&quot;hobbies&quot; value=&quot;电子游戏&quot;&gt;电子游戏&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;&lt;input type=&quot;checkbox&quot; name=&quot;hobbies&quot; value=&quot;唱歌&quot;&gt;唱歌&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;test&quot;</span> value=<span class="string">&quot;my name is yhs&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">      &lt;td&gt;你来自哪&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;from&quot;&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">      &lt;td&gt;&lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;提交&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;&lt;input type=&quot;reset&quot; value=&quot;重置&quot;&gt;重置&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">  &lt;/table&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(name = &quot;FormRequest&quot;,urlPatterns = &quot;/form&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormRequest</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(StandardCharsets.UTF_8.toString());</span><br><span class="line">        <span class="comment">//获得form表单提交的信息</span></span><br><span class="line">        String userName = request.getParameter(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;userName&quot;</span>+userName);</span><br><span class="line">        String password = request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;password&quot;</span>+password);</span><br><span class="line">        String sex = request.getParameter(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;sex&quot;</span>+sex);</span><br><span class="line">        String[] hobbies = request.getParameterValues(<span class="string">&quot;hobbies&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;hobbies&quot;</span>+ Arrays.toString(hobbies));</span><br><span class="line">        String hiddenInfo = request.getParameter(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;hiddenInfo&quot;</span>+hiddenInfo);</span><br><span class="line">        String from = request.getParameter(<span class="string">&quot;from&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;from&quot;</span>+from);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>转发</p>
<p>在HttpServletResponse中说过浏览器的页面跳转有两种方式：重定向和转发</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(name = &quot;Forward&quot;,urlPatterns = &quot;/forward&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Forward</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//转发到index页面</span></span><br><span class="line">        RequestDispatcher requestDispatcher = request.getRequestDispatcher(<span class="string">&quot;/index.jsp&quot;</span>);</span><br><span class="line">        requestDispatcher.forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注  重定向和转发的相同点与区别(重点)：</strong></p>
<ol>
<li><p>相同点</p>
<blockquote>
<ul>
<li>response.sendRedirect()方法可以实现重定向 功能是页面跳转request.getRequestDispatcher.forward(request,response)实现转发，做到的功能也是页面跳转</li>
</ul>
</blockquote>
</li>
<li><p>区别</p>
<blockquote>
<ol>
<li><p>发生位置不同 浏览器地址栏也不同</p>
<ul>
<li>重定向是由浏览器进行重新定向跳转的 url地址栏也会相应的变成重定向目的地的地址 相当于重定向的时候再次发生了一次http请求</li>
<li>转发是由服务器实现的跳转 浏览器只进行了一次请求 服务器得到请求 然后转发给另一个servlet  另一个servlet处理完再返给浏览器</li>
<li>转发的整个过程是只有一个request和response 所以浏览器的地址栏没变化</li>
<li>重定向：浏览器请求-&gt;servlet1-&gt;返回浏览器-&gt;浏览器再次请求-&gt;servlet2-&gt;返回浏览器</li>
<li>转发：浏览器请求-&gt;servlet1-&gt;servlet2-&gt;返回浏览器</li>
</ul>
<p>所有我们可以在转发源的HttpServletRequest设置一些属性，而转发目的的HttpServletRequest可以获得这个属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.setAttribute(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;yhs&quot;</span>);</span><br><span class="line">RequestDispatcher requestDispatcher = request.getRequestDispatcher(<span class="string">&quot;/form&quot;</span>);</span><br><span class="line">requestDispatcher.forward(request,response);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String userName = request.getAttribute(<span class="string">&quot;username&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>请求的资源和写法不同</p>
<ul>
<li>重定向对于返回的url是完应用名+资源名 /JavaWebLearn/index.jsp</li>
<li>而转发的资源地址是直接就是资源名 /form</li>
<li>所以转发只能访问当前web的资源</li>
<li>但重定向可以访问任意资源</li>
</ul>
</li>
<li><p>传递数据的类型不同</p>
<ul>
<li>转发的request对象可以传递各种类型的数据，包括对象</li>
<li>重定向只能传递字符</li>
</ul>
</li>
<li><p>跳转的时间不同</p>
<ul>
<li>转发时：执行到跳转语句时就会立刻跳转</li>
<li>重定向：整个页面执行完之后才执行跳转</li>
</ul>
</li>
</ol>
</blockquote>
</li>
<li><p>应用场景</p>
<blockquote>
<p><strong>转发</strong>: 访问 Servlet 处理业务逻辑，然后 forward 到 jsp 显示处理结果，浏览器里 URL 不变</p>
<p><strong>重定向</strong>: 提交表单，处理成功后 redirect 到另一个 jsp，防止表单重复提交，浏览器里 URL 变了</p>
</blockquote>
</li>
</ol>
<h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p><strong>会话：</strong></p>
<blockquote>
<p>用户打开浏览器，访问一个网站，只要不关闭浏览器，无论用户点击多少超链接，访问多少资源，直到用户关闭浏览器，这个过程我们称为一次会话。</p>
</blockquote>
<p>前面已经说过，HTTP请求是无状态请求，即每次HTTP请求都是新的。但在实际生活中，我们发现登录一次后，并不需要每次请求都再次登录。</p>
<p><strong>Cookie</strong></p>
<blockquote>
<p>W3C提出了Cookie：给每个用户颁发一个通行证，那么下次无论谁访问的时候，都需要携带通行证，这样服务器就可以通过HTTP带来的通行证来确定用户信息，这个通行证就叫Cookie。</p>
</blockquote>
<p>客户端第一次请求：</p>
<p>Client-&gt;HttpRequest-&gt;Server-&gt;Response(Cookie)-&gt;Client</p>
<p>客户端第二次请求:</p>
<p>Client-&gt;HttpRequest(Cookie)-&gt;Server-&gt;Response-&gt;Client</p>
<p>浏览器访问服务器，<strong>如果服务器需要记录该用户的状态，就使用response向浏览器发送一个Cookie，浏览器会把Cookie保存起来。当浏览器再次访问服务器的时候，浏览器会把请求的网址连同Cookie一同交给服务器</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yhs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/4/29 14:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> cookie</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;Cookie&quot;,urlPatterns = &quot;/cookie&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cookie</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建cookie 设置编码格式 避免乱码</span></span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;username&quot;</span>, URLEncoder.encode(<span class="string">&quot;殷华盛&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>));  <span class="comment">//key value的形式创建</span></span><br><span class="line">        cookie.setMaxAge(<span class="number">1000</span>*<span class="number">3600</span>);    <span class="comment">//设置cookie的有效期</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将cookie加入response 并返给浏览器</span></span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">        response.getWriter().write(<span class="string">&quot;我颁给了浏览器一个cookie&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Cookie的一些属性</strong></p>
<ul>
<li>Cookie具有不可跨域性 简单来说就是一个网站的Cookie 你不会提交给另一个网站的服务器</li>
<li>Cookie的有效期通过setMaxAge(int time)函数来设置</li>
<li>当time的值是负的时候 Cookie的值是临时性的 仅在本浏览器内有效 关闭浏览器就失效了 cookie也不会写到硬盘中 其中创建cookie时提供的默认值就是-1</li>
<li>当time = 0 时表示删除该Cookie cookie并没有提供删除机制 通过setMaxAge(0)达到删除的目的</li>
<li>当time是正数时 浏览器会将Cookie写入硬盘中 只要还在time秒前登录该网站就有效</li>
<li>Cookie不存在修改的方法 只存在覆盖的方法 当Cookie的名相同通过response返给浏览器存储 原同名Cookie就会被覆盖</li>
<li>删除，修改Cookie时，新建的Cookie除了value、maxAge之外的所有属性都要与原Cookie相同，否则浏览器将视为不同的Cookie，不予覆盖，导致删除修改失败。</li>
<li>Cookie本身可以被该项目下的所有web资源获取，但Cookie的path属性可以设置只能某个资源获取Cookie 其他不可以，Cookie.setPath(“/getCookie”) 这样只有getCookie路径的资源才能访问Cookie 其他不允许</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLDecoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yhs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/4/29 15:07</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;GetCookie&quot;,urlPatterns = &quot;/getCookie&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetCookie</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//刚才颁发给了浏览器一个cookie</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">//这里的目的是获得cookie 看看是不是得到了 其实在浏览器里也可以看 确实是得到了</span></span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        System.out.println(cookies.length);</span><br><span class="line">        <span class="keyword">for</span>(Cookie cookie:cookies)&#123;</span><br><span class="line">            String name = cookie.getName();</span><br><span class="line">            <span class="comment">//这里因为在颁布cookie的时候 对value字段进行了编码 所以现在想获得cookie就得进行解码</span></span><br><span class="line">            String value = URLDecoder.decode(cookie.getValue(),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            response.getWriter().write(name+value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Cookie的应用 ：</p>
<ol>
<li><p>显示用户上次登陆时间：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yhs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/4/29 16:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;CookiesApplication&quot;,urlPatterns = &quot;/cookieApp&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookiesApplication</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String cookieValue = <span class="keyword">null</span>;</span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd-HH:mm:ss.SSS&quot;</span>);</span><br><span class="line">        PrintWriter writer = response.getWriter();</span><br><span class="line">        <span class="keyword">for</span>(Cookie cookie:cookies)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cookie.getName().equals(<span class="string">&quot;time2&quot;</span>))&#123;</span><br><span class="line">                cookieValue = cookie.getValue();</span><br><span class="line">                writer.write(<span class="string">&quot;上次登录时间&quot;</span>+cookieValue);</span><br><span class="line">                cookie.setValue(simpleDateFormat.format(<span class="keyword">new</span> Date()));</span><br><span class="line">                response.addCookie(cookie);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cookieValue==<span class="keyword">null</span>)&#123;</span><br><span class="line">            Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;time2&quot;</span>,simpleDateFormat.format(<span class="keyword">new</span> Date()));</span><br><span class="line">            cookie.setMaxAge(<span class="number">100000</span>);</span><br><span class="line">            response.addCookie(cookie);</span><br><span class="line">            writer.write(<span class="string">&quot;欢迎第一次登陆&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码解释：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">先遍历当前Http请求的Cookie，如果不包含名为time2的Cookie，则认为用户是首次登录，这时创建一个time2 Cookie，value为当前时间。返给用户信息为首次登录。</span><br><span class="line">如果Cookie中包含time2 Cookie，则取出当前Cookie的value，将上次用户登录的时间返给用户，并且更新当前Cookie为当前时间。</span><br></pre></td></tr></table></figure>
</li>
<li><p>显示用户浏览过的书籍</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yhs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/4/29 19:54</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookCollector</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LinkedHashMap&lt;Integer,Book&gt; linkedHashMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        linkedHashMap.put(<span class="number">1</span>,<span class="keyword">new</span> Book(<span class="number">1</span>,<span class="string">&quot;javaWeb&quot;</span>));</span><br><span class="line">        linkedHashMap.put(<span class="number">2</span>,<span class="keyword">new</span> Book(<span class="number">2</span>,<span class="string">&quot;coreJava&quot;</span>));</span><br><span class="line">        linkedHashMap.put(<span class="number">3</span>,<span class="keyword">new</span> Book(<span class="number">3</span>,<span class="string">&quot;mysql&quot;</span>));</span><br><span class="line">        linkedHashMap.put(<span class="number">4</span>,<span class="keyword">new</span> Book(<span class="number">4</span>,<span class="string">&quot;javaScript&quot;</span>));</span><br><span class="line">        linkedHashMap.put(<span class="number">5</span>,<span class="keyword">new</span> Book(<span class="number">5</span>,<span class="string">&quot;hadoop&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LinkedHashMap&lt;Integer,Book&gt;getAllBook()&#123;</span><br><span class="line">        <span class="keyword">return</span> BookCollector.linkedHashMap;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getById</span><span class="params">(String idString)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> id = Integer.parseInt(idString);</span><br><span class="line">        <span class="keyword">return</span> linkedHashMap.get(id).getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Book <span class="title">getBookById</span><span class="params">(String idString)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> id = Integer.parseInt(idString);</span><br><span class="line">        <span class="keyword">return</span> linkedHashMap.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yhs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/4/29 19:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;CookieApplication2&quot;,urlPatterns = &quot;/book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieApplication2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">//显示所有书籍</span></span><br><span class="line">        PrintWriter writer = response.getWriter();</span><br><span class="line">        writer.write(<span class="string">&quot;网上所有书籍&quot;</span>+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">        Set&lt;Map.Entry&lt;Integer,Book&gt;&gt; entries = BookCollector.getAllBook().entrySet();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;Integer,Book&gt; bookEntry:entries)&#123;</span><br><span class="line">            Book book = bookEntry.getValue();</span><br><span class="line">            String url = <span class="string">&quot;/JavaWebLearn/bookServlet?id=&quot;</span>+book.getId();</span><br><span class="line">            writer.write(book.getName());</span><br><span class="line">            writer.write(<span class="string">&quot;&lt;a href=&#x27;&quot;</span>+url+<span class="string">&quot;&#x27;&gt;购买&lt;/a&gt;&quot;</span>);</span><br><span class="line">            writer.write(<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        writer.write(<span class="string">&quot;您曾经浏览过：&quot;</span>+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        String bookHistory = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span>(Cookie cookie:cookies)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cookie.getName().equals(<span class="string">&quot;bookHistory&quot;</span>))&#123;</span><br><span class="line">                bookHistory = cookie.getValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] strings = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(bookHistory!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            strings = bookHistory.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(String string:strings)&#123;</span><br><span class="line">            writer.write(BookCollector.getById(string)+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yhs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/4/29 20:20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;BookServlet&quot;,urlPatterns = &quot;/bookServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        String id = request.getParameter(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        String bookHistory = <span class="keyword">null</span>;</span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">for</span>(Cookie cookie:cookies)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cookie.getName().equals(<span class="string">&quot;bookHistory&quot;</span>))&#123;</span><br><span class="line">                bookHistory = cookie.getValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(bookHistory!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            String[] strings = bookHistory.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">            List&lt;String&gt; list = Arrays.asList(strings);</span><br><span class="line">            LinkedList&lt;String&gt; linkedList = <span class="keyword">new</span> LinkedList&lt;&gt;(list);</span><br><span class="line">            <span class="keyword">if</span>(linkedList.contains(id))&#123;</span><br><span class="line">                linkedList.remove(id);</span><br><span class="line">                linkedList.addFirst(id);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(linkedList.size()&gt;=<span class="number">3</span>)&#123;</span><br><span class="line">                    linkedList.removeLast();</span><br><span class="line">                    linkedList.addFirst(id);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    linkedList.addFirst(id);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">            <span class="keyword">for</span>(String bookid:linkedList)&#123;</span><br><span class="line">                stringBuffer.append(bookid+<span class="string">&quot;_&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            bookHistory = stringBuffer.deleteCharAt(stringBuffer.length()-<span class="number">1</span>).toString();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            bookHistory = id;</span><br><span class="line">        &#125;</span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;bookHistory&quot;</span>,bookHistory);</span><br><span class="line">        cookie.setMaxAge(<span class="number">1000</span>);</span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>代码解释：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">代码块1是一个Book类加一个初始化的Book集合，用于制造原始数据。</span><br><span class="line">代码块2是核心类，他调用代码块1的初始化数据展示给用户 然后通过查询bookHistory这个Cookie，将用户浏览过的数据返回给页面显示</span><br><span class="line">代码块3是业务处理类，主要处理Cookie，当用户点击展示的Book时，就会触发一个指向代码块3的Http请求，代码块3通过HTTP参数获得当前用户请求的书籍，判断当前bookHistory Cookie的情况，如果为空，就造一个bookHistory Cookie并将当前HTTP参数的Book id作为value。如果当前bookHistory不为空，判断当前id是否已经存在，如果存在就移动当前id，并置于第一位，如果不存在，判断当前Cookie里记录的用户浏览数是否小于3，小于3就直接将当前请求id置于最前，否则就删除最后一本书，再将当前id置于最前。转为字符串(&quot;_&quot;分割)更新Cookie</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>与Cookie类似，Session也是用于记录用户身份，标记浏览器状态的机制。但不同的是，Cookie是给用户颁发通行证，本地浏览器存储Cookie，而Session保存在服务器中。</p>
<blockquote>
<p>Session 是另一种记录浏览器状态的机制。不同的是Cookie保存在浏览器中，Session保存在服务器中。用户使用浏览器访问服务器的时候，服务器把用户的信息以某种的形式记录在服务器，这就是Session</p>
</blockquote>
<p>简单来说，Session相当于在服务器中建立了一份“客户明细表”。然后通过检查服务器上的“客户明细表”来确认用户的身份的。</p>
<p>但与Cookie不同，Session除了可以保存字符串外，还可以存储对象。</p>
<p><strong>Session API</strong></p>
<ul>
<li>long getCreationTime();【获取Session被创建时间】</li>
<li><strong>String getId();【获取Session的id】</strong></li>
<li>long getLastAccessedTime();【返回Session最后活跃的时间】</li>
<li>ServletContext getServletContext();【获取ServletContext对象】</li>
<li><strong>void setMaxInactiveInterval(int var1);【设置Session超时时间】</strong></li>
<li><strong>int getMaxInactiveInterval();【获取Session超时时间】</strong></li>
<li><strong>Object getAttribute(String var1);【获取Session属性</strong>】</li>
<li>Enumeration getAttributeNames();【获取Session所有的属性名】</li>
<li><strong>void setAttribute(String var1, Object var2);【设置Session属性】</strong></li>
<li><strong>void removeAttribute(String var1);【移除Session属性】</strong></li>
<li><strong>void invalidate();【销毁该Session】</strong></li>
<li>boolean isNew();【该Session是否为新的】</li>
</ul>
<p><strong>Session的生命周期</strong></p>
<ul>
<li><p>Session在用户<strong>第一次访问服务器Servlet，jsp等动态资源就会被自动创建，Session对象保存在内存里</strong>，这也就为什么上面的例子可以<strong>直接使用request对象获取得到Session对象</strong>。如果访问HTML,IMAGE等静态资源Session不会被创建。</p>
</li>
<li><p>Session生成后，只要用户继续访问，服务器就会更新Session的最后访问时间，无论<strong>是否对Session进行读写，服务器都会认为Session活跃了一次</strong></p>
</li>
<li><p>由于会有越来越多的用户访问服务器，因此Session也会越来越多。<strong>为了防止内存溢出，服务器会把长时间没有活跃的Session从内存中删除，这个时间也就是Session的超时时间</strong></p>
<p>Session的超时时间默认是30分钟，有三种方式可以对Session的超时时间进行修改</p>
<blockquote>
<ul>
<li><p>在tomcat/conf/web.xml文件中设置 对所有的WEB应用都有效 单位为分钟</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>60<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在单个的web.xml文件中设置 对单个web应用有效 如果有冲突，以自己的web应用为准</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>60<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过setMaxInactiveInterval()方法设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">httpSession.setMaxInactiveInterval(<span class="number">60</span>);  <span class="comment">//单位是秒</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<p><strong>与Cookie不同，session周期指的是不活动时间 当在超时时间内访问session session会重新计时，如果重启tomcat 或reload web应用 或者关机等 session也会消失，而Cookie的生命周期是按累计时间来算的 不管用户是否访问了Session</strong></p>
</li>
</ul>
<p><strong>Session的原理</strong></p>
<p>思考一个问题：HTTP是无状态请求，Session为每个用户建立一个用户明细表，当用户再次请求，服务器可以取出这个请求用户的Session，但<strong>HTTP是无状态的，他怎么知道每次请求对应的是哪个用户呢？</strong></p>
<blockquote>
<p><strong>其实Session并没有摆脱Cookie，Session之所以能识别用户，靠得就是Cookie，这个Cookie叫做JESSIONID 它的值是Session的id值</strong></p>
<p>这个Cookie是由服务器自动颁发给浏览器的，不用手动创建，这个Cookie的MaxAge是-1，也即关闭浏览器后就失效。</p>
</blockquote>
<p><strong>Session的应用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(name = &quot;booklist&quot;,urlPatterns = &quot;/booklist&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Booklist</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">//显示所有书籍</span></span><br><span class="line">        PrintWriter writer = response.getWriter();</span><br><span class="line">        writer.write(<span class="string">&quot;网上所有书籍&quot;</span>+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">        Set&lt;Map.Entry&lt;Integer,Book&gt;&gt; entries = BookCollector.getAllBook().entrySet();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;Integer,Book&gt; bookEntry:entries)&#123;</span><br><span class="line">            Book book = bookEntry.getValue();</span><br><span class="line">            String url = <span class="string">&quot;/JavaWebLearn/buyBook?id=&quot;</span>+book.getId();</span><br><span class="line">            writer.write(book.getName());</span><br><span class="line">            writer.write(<span class="string">&quot;&lt;a href=&#x27;&quot;</span>+url+<span class="string">&quot;&#x27;&gt;购买&lt;/a&gt;&quot;</span>);</span><br><span class="line">            writer.write(<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(name = &quot;buyBook&quot;,urlPatterns = &quot;/buyBook&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyBook</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String id = request.getParameter(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        Book book = BookCollector.getBookById(id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得Session对象</span></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        List&lt;Book&gt; bookList = (List&lt;Book&gt;) session.getAttribute(<span class="string">&quot;list&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断是否为空 若为空 则新建一个list并保存在session中</span></span><br><span class="line">        <span class="keyword">if</span>(bookList==<span class="keyword">null</span>)&#123;</span><br><span class="line">            bookList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            session.setAttribute(<span class="string">&quot;list&quot;</span>,bookList);</span><br><span class="line">        &#125;</span><br><span class="line">        bookList.add(book);</span><br><span class="line">        <span class="comment">//做跳转</span></span><br><span class="line">        <span class="comment">//encodeURL(String url)</span></span><br><span class="line">        <span class="comment">//encodeRedirectURL(String url)</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        String url = <span class="string">&quot;/JavaWebLearn/showBuyBook&quot;</span>;</span><br><span class="line">        response.sendRedirect(response.encodeURL(url));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(name = &quot;showBuyBook&quot;,urlPatterns = &quot;/showBuyBook&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShowBuyBook</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        PrintWriter writer = response.getWriter();</span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        List&lt;Book&gt; bookList = (List&lt;Book&gt;) session.getAttribute(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(bookList==<span class="keyword">null</span>||bookList.size()==<span class="number">0</span>)&#123;</span><br><span class="line">            writer.write(<span class="string">&quot;您暂时未购买任何书籍&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            writer.write(<span class="string">&quot;您购买过以下商品:&quot;</span>+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span>(Book book:bookList)&#123;</span><br><span class="line">                writer.write(book.getName()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>代码解释：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">与Cookie的应用相同，用户买书，记录用户买过的书。</span><br><span class="line">代码块1展示了当前的书籍，并对每个书籍加了一个URL，对应一个HTTP请求。</span><br><span class="line">点击购买的HTTP请求会到代码块2，这时代码块2记录用户购买的书籍，放入Session中</span><br><span class="line">代码块3取出Session中的记录，展示给用户当前购买的(Sesion中记录的)书籍。</span><br></pre></td></tr></table></figure>

<p><strong>Session与Cookie的区别</strong></p>
<p><strong>从存储方式上比较</strong></p>
<ul>
<li>Cookie只能存储字符串，如果要存储非ASCII字符串还要对其编码。</li>
<li>Session可以存储任何类型的数据，可以把Session看成是一个容器</li>
</ul>
<p><strong>从隐私安全上比较</strong></p>
<ul>
<li><strong>Cookie存储在浏览器中，对客户端是可见的</strong>。信息容易泄露出去。如果使用Cookie，最好将Cookie加密</li>
<li><strong>Session存储在服务器上，对客户端是透明的</strong>。不存在敏感信息泄露问题。</li>
</ul>
<p><strong>从有效期上比较</strong></p>
<ul>
<li>Cookie保存在硬盘中，只需要设置maxAge属性为比较大的正整数，即使关闭浏览器，Cookie还是存在的</li>
<li><strong>Session的保存在服务器中，设置maxInactiveInterval属性值来确定Session的有效期。并且Session依赖于名为JSESSIONID的Cookie，该Cookie默认的maxAge属性为-1。如果关闭了浏览器，该Session虽然没有从服务器中消亡，但也就失效了。</strong></li>
</ul>
<p><strong>从对服务器的负担比较</strong></p>
<ul>
<li>Session是保存在服务器的，每个用户都会产生一个Session，如果是并发访问的用户非常多，是不能使用Session的，Session会消耗大量的内存。</li>
<li>Cookie是保存在客户端的。不占用服务器的资源。像baidu、Sina这样的大型网站，一般都是使用Cookie来进行会话跟踪。</li>
</ul>
<p><strong>从浏览器的支持上比较</strong></p>
<ul>
<li>如果浏览器禁用了Cookie，那么Cookie是无用的了！</li>
<li>如果浏览器禁用了Cookie，Session可以通过URL地址重写来进行会话跟踪。</li>
</ul>
<p><strong>从跨域名上比较</strong></p>
<ul>
<li>Cookie可以设置domain属性来实现跨域名</li>
<li>Session只在当前的域名内有效，不可夸域名</li>
</ul>
]]></content>
      <categories>
        <category>-学习笔记 -后端</category>
      </categories>
      <tags>
        <tag>Http</tag>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis笔记</title>
    <url>/2020/08/06/Mybatis%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录 。（摘自Mybatis官方文档）</p>
</blockquote>
<a id="more"></a>
<h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><p><strong>Mybatis与JPA的对比：</strong></p>
<ul>
<li>Mybatis是一个半自动框架，JPA(Hibernate)是一个全自动框架。</li>
<li>Mybatis相比JPA更加轻量化，学习成本更加的低，入门简单容易。</li>
<li>Mybatis更适合联表查询，JPA更适合单表查询</li>
<li>开发效率：JPA &gt; Mybatis，因为JPA是全自动框架，不需要写任何SQL语句，但Mybatis的所有SQL语句都需要自己写。</li>
<li>国内热度：Mybatis&gt;&gt;JPA   国外热度：JPA&gt;&gt;Mybatis</li>
</ul>
<p><strong>先修内容：</strong></p>
<ul>
<li>SQL语句</li>
<li>JDBC</li>
</ul>
<h2 id="为什么学习Mybatis"><a href="#为什么学习Mybatis" class="headerlink" title="为什么学习Mybatis"></a>为什么学习Mybatis</h2><p>无论是Mybatis或JPA其实都是<strong>ORM(Object Relational Mapping)**的一种实现框架，都是对</strong>JDBC**的一种封装</p>
<p><strong>ORM:</strong></p>
<blockquote>
<p>在关系型数据库和对象之间作一个映射，这样，我们在具体的操作数据库的时候，就不需要再去和复杂的SQL语句打交道，只要像平时操作对象一样操作它就可以</p>
</blockquote>
<p>举个例子：</p>
<p>我们当前有一个User表</p>
<p><img data-src="C:\Users\90617\AppData\Roaming\Typora\typora-user-images\image-20200622090529799.png" alt="image-20200622090529799"></p>
<p>他会对应一个我们Java中的一个User类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yhs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/19 22:00</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 数据库实体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在我们有一个需求，查询用户表中所有的用户</p>
<p>如果用<strong>JDBC</strong>开发：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yhs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/22 9:10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUser</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sql = <span class="string">&quot;select * from user&quot;</span>;</span><br><span class="line">            <span class="comment">//JDBC的配置信息无关紧要，所以用个工具类隐藏了</span></span><br><span class="line">            Connection connection = BaseDao.getConnection();</span><br><span class="line">            <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                PreparedStatement preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">                ResultSet resultSet = preparedStatement.executeQuery();</span><br><span class="line">                <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">                    User user = <span class="keyword">new</span> User();</span><br><span class="line">                    user.setId(resultSet.getLong(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                    user.setName(resultSet.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">                    user.setPassword(resultSet.getString(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">                    userList.add(user);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到对于查询回来的结果，放入了<strong>resultSet</strong>对象中，<strong>我们需要自己从中取数据库的字段，然后将其与我们的User字段类对应上</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setId(resultSet.getLong(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">user.setName(resultSet.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">user.setPassword(resultSet.getString(<span class="string">&quot;password&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>如果使用Mybatis，数据库字段与我们的Entity映射就由框架做了，我们不需要自己做</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yhs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/19 22:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> User的Dao层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@data</span>: 2020/06/22 09:29</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span>: yhs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: &#123;<span class="doctag">@link</span> List&lt;User&gt; &#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>: 查询全部用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.coderzoe.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.coderzoe.entity.User&quot;</span>&gt;</span></span><br><span class="line">        select * from smbms.user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yhs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/19 22:29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtil.getSqlSession();</span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; userList = userMapper.getUserList();</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">        MybatisUtil.closeSqlSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，对于查询出来的结果，我们并没有手动将数据库与Java类匹配，这一些都是框架帮我们做的。</p>
<p>总结：</p>
<ul>
<li><strong>学习Mybatis提高了我们的开发效率，将原本繁琐的映射关系由框架来代替我们完成</strong></li>
<li><strong>相比于JPA，Mybatis属于半自动框架，SQL语句自己写，这样查询的灵活度会更高，连表查询会更加容易。</strong></li>
</ul>
<h2 id="Mybatis的学习"><a href="#Mybatis的学习" class="headerlink" title="Mybatis的学习"></a>Mybatis的学习</h2><h3 id="1-项目搭建"><a href="#1-项目搭建" class="headerlink" title="1. 项目搭建"></a>1. 项目搭建</h3><h4 id="1-1-导入依赖"><a href="#1-1-导入依赖" class="headerlink" title="1.1 导入依赖"></a>1.1 导入依赖</h4><p>使用Mybatis需要导入下面两个依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>由于Mybatis的Dao层实现是xml，加上Maven本身的特性，我们需要配置Maven的编译</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-配置核心配置文件"><a href="#1-2-配置核心配置文件" class="headerlink" title="1.2 配置核心配置文件"></a>1.2 配置核心配置文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/smbms?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置文件解释：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 一个environments下可以包含多套environment，</span></span><br><span class="line"><span class="comment">    每个environment即为一个数据库连接环境，</span></span><br><span class="line"><span class="comment">    这里通过id指明当前使用哪套环境。 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 事务管理选择为JDBC --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过连接池的形式管理数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JDBC连接参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/smbms?                  useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-3编写工具类"><a href="#1-3编写工具类" class="headerlink" title="1.3编写工具类"></a>1.3编写工具类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coderzoe.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yhs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/18 17:32</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;SqlSession&gt; sessionThreadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MybatisUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = sessionThreadLocal.get();</span><br><span class="line">        <span class="keyword">if</span>(sqlSession==<span class="keyword">null</span>)&#123;</span><br><span class="line">            sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">            <span class="comment">//设置事务自动提交 默认是false</span></span><br><span class="line"><span class="comment">//            sqlSession = sqlSessionFactory.openSession(true);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = sessionThreadLocal.get();</span><br><span class="line">        <span class="keyword">if</span>(sqlSession!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            sqlSession.close();</span><br><span class="line">            sessionThreadLocal.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>每个基于 MyBatis 的应用都是以一个 SqlSessionFactory 的实例为核心的。SqlSessionFactory 的实例可以通过 SqlSessionFactoryBuilder 获得。而 SqlSessionFactoryBuilder 则可以从 XML 配置文件或一个预先配置的 Configuration 实例来构建出 SqlSessionFactory 实例。</strong></p>
<p><strong>既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。你可以通过 SqlSession 实例来直接执行已映射的 SQL 语句</strong> </p>
<p>以上均摘自Mybatis官方中文文档</p>
</blockquote>
<h4 id="1-4-编写一个Demo"><a href="#1-4-编写一个Demo" class="headerlink" title="1.4 编写一个Demo"></a>1.4 编写一个Demo</h4><p>Entity：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coderzoe.entity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yhs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/19 22:00</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 数据库实体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Dao层接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coderzoe.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.coderzoe.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yhs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/19 22:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> User的Dao层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@data</span>: 2020/06/22 09:29</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span>: yhs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: &#123;<span class="doctag">@link</span> List&lt;User&gt; &#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>: 查询全部用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>编写Dao层接口实现的xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.coderzoe.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.coderzoe.entity.User&quot;</span>&gt;</span></span><br><span class="line">        select * from smbms.user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>将xml文件注册到Mybatis核心配置文件中：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/coderzoe/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtil.getSqlSession();</span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    List&lt;User&gt; userList = userMapper.getUserList();</span><br><span class="line">    System.out.println(userList);</span><br><span class="line">    MybatisUtil.closeSqlSession();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong></p>
<blockquote>
<ul>
<li><ol>
<li><p>通过UserMapper.xml文件实现UserMapper接口</p>
</li>
<li><p>UserMapper.xml文件其实是绑定UserMapper接口的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.coderzoe.dao.UserMapper&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过namespace参数绑定一个Dao层接口</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.coderzoe.entity.User&quot;</span>&gt;</span></span><br><span class="line">        select * from smbms.user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过select标签里的id绑定一个接口里的方法，resultType即为SQL查询返回的类型，这里我们查询的是用户表，所以返回结果为用户类</p>
</li>
<li><p>需要将写好的xml文件注册到Mybatis核心配置文件中</p>
</li>
</ol>
</li>
</ul>
</blockquote>
<p><strong>注意：</strong></p>
<blockquote>
<p><strong>可能犯的错</strong></p>
<blockquote>
<ol>
<li>xml文件没用注册到Mybatyis核心配置文件里</li>
<li>绑定的接口错误</li>
<li>绑定的方法名错误</li>
<li>返回类型不对</li>
<li>Maven项目中没用生成xml文件</li>
</ol>
</blockquote>
</blockquote>
<h3 id="2-增删改查"><a href="#2-增删改查" class="headerlink" title="2. 增删改查"></a>2. 增删改查</h3><h4 id="2-1-增"><a href="#2-1-增" class="headerlink" title="2.1 增"></a>2.1 增</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User use)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.coderzoe.entity.User&quot;</span>&gt;</span></span><br><span class="line">        insert into smbms.user(id,name,password) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtil.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="comment">//增删改需要提交事务</span></span><br><span class="line">    mapper.insertUser(<span class="keyword">new</span> User((<span class="keyword">long</span>)<span class="number">4</span>,<span class="string">&quot;lili&quot;</span>,<span class="string">&quot;111&quot;</span>));</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    MybatisUtil.closeSqlSession();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-删"><a href="#2-2-删" class="headerlink" title="2.2 删"></a>2.2 删</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">long</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;long&quot;</span>&gt;</span></span><br><span class="line">    delete from smbms.user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtil.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    mapper.delete(<span class="number">4</span>);</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    MybatisUtil.closeSqlSession();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-改"><a href="#2-3-改" class="headerlink" title="2.3 改"></a>2.3 改</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.coderzoe.entity.User&quot;</span>&gt;</span></span><br><span class="line">    update smbms.user set id=#&#123;id&#125;,name=#&#123;name&#125;,password=#&#123;password&#125; where id=#&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtil.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    mapper.update(<span class="keyword">new</span> User(<span class="number">4L</span>,<span class="string">&quot;meimei&quot;</span>,<span class="string">&quot;beautiful&quot;</span>));</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-4-查"><a href="#2-4-查" class="headerlink" title="2.4 查"></a>2.4 查</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(<span class="keyword">long</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.coderzoe.entity.User&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;long&quot;</span>&gt;</span></span><br><span class="line">    select * from smbms.user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtil.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    User userById = mapper.getUserById((<span class="keyword">long</span>) <span class="number">1</span>);</span><br><span class="line">    System.out.println(userById);</span><br><span class="line">    MybatisUtil.closeSqlSession();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong></p>
<p>不同于JDBC，Mybatis中的事务自动提交默认是<strong>false</strong>，在进行增删改的时候，我们需要手动提交一下事务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sqlSession.commit();</span><br></pre></td></tr></table></figure>

<h4 id="2-5-Map的使用"><a href="#2-5-Map的使用" class="headerlink" title="2.5  Map的使用"></a>2.5  Map的使用</h4><p>通过上面我们可以看到，Mybatis插入或更新数据时，往往需要一个实体类作为参数，这个实体类的字段名要和Mybatis的占位符相同(下面的#{id},#{name},#{password})</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.coderzoe.entity.User&quot;</span>&gt;</span></span><br><span class="line">        insert into smbms.user(id,name,password) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但在实际开发中，我们一个实体类可能包含多个字段，但我只需要保存这个实体类中的某几个字段，其他字段为空，我不关心。如果依然用实体类作为参数来传递，在构造时可能会很麻烦，还得将其他字段设空，此时我们就需要引入Map，用Map作为参数传递，<strong>一个Map会对应一个实体类，Map中的每个元素对应实体类中的一个字段，Map的Key对应Mybatis的占位符 Value对应字段的值 这样就可以自定义字段 想任意截取实体类或重命名字段都可以</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertUser2</span><span class="params">(Map&lt;String,Object&gt; objectMap)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser2&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    insert into smbms.user(id,name,password) values (#&#123;userId&#125;,#&#123;userPwd&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtil.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;userId&quot;</span>,<span class="number">5</span>);</span><br><span class="line">    map.put(<span class="string">&quot;userPwd&quot;</span>,<span class="string">&quot;mybatisPwd&quot;</span>);</span><br><span class="line">    mapper.insertUser2(map);</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    MybatisUtil.closeSqlSession();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到我们传递的parameterType不再是User类，而是map，Mybatis中的占位符，也与map的key保持一致。</p>
<p>除了增加和修改，<strong>在实际业务中的多条件查询中，我们也经常会传递Map，每个查询条件对应Map的一个元素</strong></p>
<h3 id="3-分页"><a href="#3-分页" class="headerlink" title="3. 分页"></a>3. 分页</h3><p>Mybatis分页查询其实就是通过SQL语句的limit实现(<strong>其实JPA底层也是limit实现的</strong>)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findUserByPage</span><span class="params">(Map&lt;String,Integer&gt; map)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserByPage&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.coderzoe.entity.User&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findUserByPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtil.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;startIndex&quot;</span>,<span class="number">0</span>);</span><br><span class="line">    map.put(<span class="string">&quot;pageSize&quot;</span>,<span class="number">3</span>);</span><br><span class="line">    List&lt;User&gt; userByPage = mapper.findUserByPage(map);</span><br><span class="line">    System.out.println(userByPage);</span><br><span class="line">    MybatisUtil.closeSqlSession();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-动态SQL"><a href="#4-动态SQL" class="headerlink" title="4. 动态SQL"></a>4. 动态SQL</h3><p>动态SQL其实在我们的现实业务中很常见，比如多条件搜索时，用户不一定把每个条件都填上，那样生成的SQL查询语句就是动态的。</p>
<p>假设现在我们有一张blog表</p>
<p><img data-src="C:\Users\90617\AppData\Roaming\Typora\typora-user-images\image-20200622161521224.png" alt="image-20200622161521224"></p>
<p>对应的Java实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coderzoe.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yhs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/28 23:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> views;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Blog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Blog&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&#x27;&quot;</span> + id + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, title=&#x27;&quot;</span> + title + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, author=&#x27;&quot;</span> + author + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, createTime=&quot;</span> + createTime +</span><br><span class="line">                <span class="string">&quot;, views=&quot;</span> + views +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAuthor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthor</span><span class="params">(String author)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateTime</span><span class="params">(Date createTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.createTime = createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getViews</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> views;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setViews</span><span class="params">(<span class="keyword">int</span> views)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.views = views;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>用户可以通过标题作者或浏览量来进行筛选，如果采用JDBC操作，我们的代码量就会比较繁琐，SQL语句需要自己拼接：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.coderzoe.dao.BaseDao;</span><br><span class="line"><span class="keyword">import</span> com.coderzoe.entity.Blog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yhs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/22 16:18</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBlob</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectBlob</span><span class="params">(String title,String author,Integer views )</span></span>&#123;</span><br><span class="line">        List&lt;Blog&gt; blogList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Object&gt; paramList  = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            StringBuilder sql = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            sql.append(<span class="string">&quot;select * from blog&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(title!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                sql.append(<span class="string">&quot; where title like ?&quot;</span>);</span><br><span class="line">                paramList.add(title);</span><br><span class="line">                <span class="keyword">if</span>(author!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    sql.append(<span class="string">&quot; and author like ?&quot;</span>);</span><br><span class="line">                    paramList.add(author);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(views!= <span class="keyword">null</span>)&#123;</span><br><span class="line">                    sql.append(<span class="string">&quot; and views = ?&quot;</span>);</span><br><span class="line">                    paramList.add(views);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(author!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    sql.append(<span class="string">&quot; where author like ?&quot;</span>);</span><br><span class="line">                    paramList.add(author);</span><br><span class="line">                    <span class="keyword">if</span>(views != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        sql.append(<span class="string">&quot; and views = ?&quot;</span>);</span><br><span class="line">                        paramList.add(views);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (views!= <span class="keyword">null</span>)&#123;</span><br><span class="line">                        sql.append(<span class="string">&quot; where views = ?&quot;</span>);</span><br><span class="line">                        paramList.add(views);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Object[] params = paramList.toArray();</span><br><span class="line">            <span class="comment">//JDBC的配置信息无关紧要，所以用个工具类隐藏了</span></span><br><span class="line">            Connection connection = BaseDao.getConnection();</span><br><span class="line">            <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                PreparedStatement preparedStatement = connection.prepareStatement(sql.toString());</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; params.length; i++)&#123;</span><br><span class="line">                    preparedStatement.setObject(i+<span class="number">1</span>,params[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                ResultSet resultSet = preparedStatement.executeQuery();</span><br><span class="line">                <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">                    Blog blog = <span class="keyword">new</span> Blog();</span><br><span class="line">                    blog.setId(resultSet.getString(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                    blog.setTitle(resultSet.getString(<span class="string">&quot;title&quot;</span>));</span><br><span class="line">                    blog.setAuthor(resultSet.getString(<span class="string">&quot;author&quot;</span>));</span><br><span class="line">                    blog.setCreateTime(resultSet.getDate(<span class="string">&quot;create_time&quot;</span>));</span><br><span class="line">                    blog.setViews(resultSet.getInt(<span class="string">&quot;views&quot;</span>));</span><br><span class="line">                    blogList.add(blog);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(blogList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到，代码量是十分繁琐的，因为我们需要根据用户输入的结果来动态的生成sql语句，比如where的位置 and的位置等等，甚至有没有where 有没有and 都需要我们自己去判断，这还是只有三个参数，如果更多的搜索条件，代码逻辑势必会更加复杂。</p>
<p>如果使用Mybatis：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlogMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Blog&gt; <span class="title">queryBlogIf</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIf&quot;</span>  <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.coderzoe.entity.Blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title!=null&quot;</span>&gt;</span></span><br><span class="line">            title = #&#123;title&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author!=null&quot;</span>&gt;</span></span><br><span class="line">            and author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;view!=null&quot;</span>&gt;</span></span><br><span class="line">            and view &gt; #&#123;view&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryBlogIf</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtil.getSqlSession();</span><br><span class="line">    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    List&lt;Blog&gt; blogs = mapper.queryBlogIf(map);</span><br><span class="line">    System.out.println(blogs);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">    List&lt;Blog&gt; blogs1 = mapper.queryBlogIf(map);</span><br><span class="line">    System.out.println(blogs1);</span><br><span class="line">    MybatisUtil.closeSqlSession();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Mybatis提供了一些xml元素供我们做动态的生成sql，如果有更多的筛选字段，在后面重复<if></if>就好了</p>
<p>Mybatis替我们确定了where和and的位置，还有他们之间的空格。</p>
<p>当然，除了动态生成查询语句，增删改也可以</p>
<h4 id="4-1-增"><a href="#4-1-增" class="headerlink" title="4.1 增"></a>4.1 增</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlogMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertBlog</span><span class="params">(Blog blog)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;insertKey&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id!=null&quot;</span>&gt;</span></span><br><span class="line">            id,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title!=null&quot;</span>&gt;</span></span><br><span class="line">            title,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author!=null&quot;</span>&gt;</span></span><br><span class="line">            author,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;create_time!=null&quot;</span>&gt;</span></span><br><span class="line">            create_time,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;views!=null&quot;</span>&gt;</span></span><br><span class="line">            views,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;inserValue&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id!=null&quot;</span>&gt;</span></span><br><span class="line">            #&#123;id&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title!=null&quot;</span>&gt;</span></span><br><span class="line">            #&#123;title&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author!=null&quot;</span>&gt;</span></span><br><span class="line">            #&#123;author&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;createTime!=null&quot;</span>&gt;</span></span><br><span class="line">            #&#123;createTime&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;views!=null&quot;</span>&gt;</span></span><br><span class="line">            #&#123;views&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertBlog&quot;</span>&gt;</span></span><br><span class="line">    insert into blog (<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;insertKey&quot;</span>/&gt;</span>) values(<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;inserValue&quot;</span>/&gt;</span>)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertBlog</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtil.getSqlSession();</span><br><span class="line">    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;id&quot;</span>,CreateUUId.getId());</span><br><span class="line">    map.put(<span class="string">&quot;author&quot;</span>,<span class="string">&quot;殷华盛&quot;</span>);</span><br><span class="line">    mapper.insertBlog(map);</span><br><span class="line">    sqlSession.commit();</span><br><span class="line"></span><br><span class="line">    MybatisUtil.closeSqlSession();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我们使用了include标签，在日常开发中，很多操作可能是重复的代码，这些代码可以提取出来，作为公共代码被其他地方调用，Mybatis的xml文件也是一样，<sql id="inserValue"></sql>内的代码就是公共代码，</p>
<p><include refid="inserValue"/>做的是调用这部分代码。</p>
<h4 id="4-2-改"><a href="#4-2-改" class="headerlink" title="4.2 改"></a>4.2 改</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlogMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateBlog</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBlog&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    update blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title!=null&quot;</span>&gt;</span></span><br><span class="line">            title = #&#123;title&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author!=null&quot;</span>&gt;</span></span><br><span class="line">            author = #&#123;author&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateBlog</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtil.getSqlSession();</span><br><span class="line">    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;3e24216d7b7145bcb5c42f30da5c0d59&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;程序员的自我修养&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;author&quot;</span>,<span class="string">&quot;殷华盛&quot;</span>);</span><br><span class="line">    mapper.updateBlog(map);</span><br><span class="line"></span><br><span class="line">    sqlSession.commit();</span><br><span class="line"></span><br><span class="line">    MybatisUtil.closeSqlSession();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-3-查"><a href="#4-3-查" class="headerlink" title="4.3 查"></a>4.3 查</h4><p>刚才已经讲了通过<where><if></if></where>动态生成SQL，这种需求往往是，用户填入多个字段，如果有用户填的那个字段就进行SQL查找，如果没有就查找全部。</p>
<p>设想这样一种需求，判断用户是否填入字段1，如果是就按字段1进行SQL查找，<strong>否则，判断用户是否输入字段2，如果是就按字段2进行SQL查找</strong>，这样一直下去，<strong>如果都没有匹配的，就做一个默认选项分支</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlogMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Blog&gt; <span class="title">queryBlogChoose</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogChoose&quot;</span>  <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.coderzoe.entity.Blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title!=null&quot;</span>&gt;</span></span><br><span class="line">                title = #&#123;title&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;author!=null&quot;</span>&gt;</span></span><br><span class="line">                and author = #&#123;author&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                and views &gt; 5000</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryBlogChoose</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtil.getSqlSession();</span><br><span class="line">    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    List&lt;Blog&gt; blogs = mapper.queryBlogChoose(map);</span><br><span class="line">    System.out.println(blogs);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">    List&lt;Blog&gt; blogs1 = mapper.queryBlogChoose(map);</span><br><span class="line">    System.out.println(blogs1);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="string">&quot;author&quot;</span>,<span class="string">&quot;coderYin111&quot;</span>);</span><br><span class="line">    List&lt;Blog&gt; blogs2 = mapper.queryBlogChoose(map);</span><br><span class="line">    System.out.println(blogs2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，上面的需求为：</p>
<blockquote>
<p>如果用户输入了title，则按title查找，其他不关心，如果没有输入title，就判断是否输入了author，如果是就按author查找，如果都没有就按views &gt; 5000查找</p>
</blockquote>
<p>与<if></if>标签的不同，<choose><when></when><otherwise></otherwise></choose>标签类似于switch-case语句，只会选择一个分支走，如果都没有就走default。</p>
<p>我们的SQL查询语句中，除了like  = 往往还会用到<strong>in</strong> </p>
<p>in关键字后面跟的是一个集合，遍历集合里，符和需求的数据 。<strong>Mybatis通过<foreach></foreach>标签来遍历集合。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlogMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Blog&gt; <span class="title">queryBlogForeach</span><span class="params">(List&lt;String&gt; idList)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogForeach&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.coderzoe.entity.Blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog where id in </span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        #&#123;item&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryBlogForeach</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtil.getSqlSession();</span><br><span class="line">    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">    List&lt;String&gt; idList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    idList.add(<span class="string">&quot;3e24216d7b7145bcb5c42f30da5c0d59&quot;</span>);</span><br><span class="line">    idList.add(<span class="string">&quot;bd64862c84ba4c3b8afa800ace342b14&quot;</span>);</span><br><span class="line">    idList.add(<span class="string">&quot;a82f3634cf5c4aa8b1bee5ab393a1bee&quot;</span>);</span><br><span class="line">    List&lt;Blog&gt; blogs = mapper.queryBlogForeach(idList);</span><br><span class="line">    System.out.println(blogs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><foreach></foreach>标签中的</p>
<p><code>collection="list"</code> 指的是需要遍历的集合，这里的list是通过<code> parameterType="list"</code>传进来的。</p>
<p><code>item="item" index="index"</code>这里是说遍历的每个元素取命叫item，下标叫index </p>
<p><code>open="(" close=")" separator=","></code> 指的是循环开始时，前面加 一个左括号<code>(</code>循环结束时后面加一个右括号<code>)</code> ，每个遍历的元素之间，加一个逗号<code>,</code> 构造SQL</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> blog <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span> (param1,param2,param3...)</span><br></pre></td></tr></table></figure>

<h3 id="5-多表联查"><a href="#5-多表联查" class="headerlink" title="5. 多表联查"></a>5. 多表联查</h3><p>多表联查无外乎两种情况，<strong>多对一和一对多</strong></p>
<h4 id="5-1-多对一"><a href="#5-1-多对一" class="headerlink" title="5.1 多对一"></a>5.1 多对一</h4><p>需求：</p>
<blockquote>
<p>当前有老师学生表，假设当前我们多个学生对于一个老师</p>
<p>现在要求：</p>
<blockquote>
<p>查询出学生表所有信息，并查出每个学生对应的老师信息</p>
</blockquote>
</blockquote>
<p>学生表：</p>
<p><img data-src="C:\Users\90617\AppData\Roaming\Typora\typora-user-images\image-20200623102719847.png" alt="image-20200623102719847"></p>
<p>外键tid关联老师表的id</p>
<p><img data-src="C:\Users\90617\AppData\Roaming\Typora\typora-user-images\image-20200623102755152.png" alt="image-20200623102755152"></p>
<p>老师表：</p>
<p><img data-src="C:\Users\90617\AppData\Roaming\Typora\typora-user-images\image-20200623102827686.png" alt="image-20200623102827686"></p>
<p>创建实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coderzoe.entity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yhs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/26 20:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//外键</span></span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> id, String name, Teacher teacher)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.teacher = teacher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, teacher=&quot;</span> + teacher +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Teacher <span class="title">getTeacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> teacher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTeacher</span><span class="params">(Teacher teacher)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.teacher = teacher;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coderzoe.entity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yhs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/26 20:32</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Teacher&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>创建Dao层接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coderzoe.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.coderzoe.entity.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yhs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/26 20:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@data</span>: 2020/05/26 21:54</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span>: yhs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: &#123;<span class="doctag">@link</span> List&lt;Student&gt; &#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>: 按查询 查询所有的学生和对应的老师信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">findStudentsInfo</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>创建实现接口的xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;studentAndTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.coderzoe.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 复杂的属性 我们需要单独处理</span></span><br><span class="line"><span class="comment">             对象:association</span></span><br><span class="line"><span class="comment">             集合:collection</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.coderzoe.entity.Teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacher&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findStudentsInfo&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentAndTeacher&quot;</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.coderzoe.entity.Teacher&quot;</span>&gt;</span></span><br><span class="line">    select * from teacher where id = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findStudentsInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtil.getSqlSession();</span><br><span class="line">    StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);</span><br><span class="line">    List&lt;Student&gt; studentsInfo = mapper.findStudentsInfo();</span><br><span class="line">    System.out.println(studentsInfo);</span><br><span class="line">    MybatisUtil.closeSqlSession();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里xml中用到了<resultMap></resultMap>标签，这个标签应该是Mybatis最重要的一个标签。对于数据库的表字段，可能往往与我们的实体类并不对应，比如学生表中是tid，而学生实体类中是Teacher类，这时就需要自己将数据库字段与实体类一一对应，所用到的就是<resultMap></resultMap>标签。</p>
<p><resultMap>中的<code>id</code>用于唯一标识这个标签，属性<code>type</code>指的是返回类型，即我们实际需要对应的实体表，下面的每一个<result>标签将实体类与数据库表的字段一一对应。<result>标签的<code>property</code>属性指的是当前实体类的属性名，<code>column</code>属性指的是数据库列的列名。</p>
<p><association>标签用于当前字段是对象，比如当前学生表teacher变量是一个Teacher对象。与<resultMap>相同，<code>property</code>属性指当前属性名，<code>column</code>属性指的是数据库列的列名。<code>javaType</code>属性指的是当前属性对应的Java对象类型。<code>select</code>属性指的是要执行的SQL语句，传入的是SQL语句的id。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.coderzoe.entity.Teacher&quot;</span>&gt;</span></span><br><span class="line">    select * from teacher where id = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>getTeacher</strong>语句通过传进来的id查询teacher表，返回Teacher对象。</p>
<p><strong>整个流程：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findStudentsInfo&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentAndTeacher&quot;</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>查询当前所有学生表信息，返回类型为自己定义的<strong>resultMap</strong>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;studentAndTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.coderzoe.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 复杂的属性 我们需要单独处理</span></span><br><span class="line"><span class="comment">             对象:association</span></span><br><span class="line"><span class="comment">             集合:collection</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.coderzoe.entity.Teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacher&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><resultMap>标签将数据库字段与自己的实体类做了关联映射，通过上一步的查询数据库所有信息得到数据库表信息，再按数据库字段，将数据库表信息转化为实体类信息，涉及到不一致的如实体类或集合，需要映射。</p>
<p><association>作用就是将数据库字段映射为实体类对象，通过数据库的tid参数，执行SQL语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.coderzoe.entity.Teacher&quot;</span>&gt;</span></span><br><span class="line">    select * from teacher where id = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里的<code>#&#123;tid&#125;</code>就是我们刚才 <code>column=&quot;tid&quot;</code>传入的。执行SQL语句，将tid转为Teacher对象，完成<association>标签的映射。</p>
<p><strong>除了这种方法外，还有另一种直观的方法：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;studentAndTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.coderzoe.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.coderzoe.entity.Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findStudentsInfo&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentAndTeacher&quot;</span>&gt;</span></span><br><span class="line">    select s.id sid,s.name sname,t.name  tname from student s,teacher t where s.tid = t.id;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过SQL语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> s.id <span class="keyword">sid</span>,s.name sname,t.name  tname <span class="keyword">from</span> student s,teacher t <span class="keyword">where</span> s.tid = t.id;</span><br></pre></td></tr></table></figure>

<p>先联表查出所有的字段，然后通过<resultMap>标签将查出的数据库字段与实体类对应。</p>
<h4 id="5-2-一对多"><a href="#5-2-一对多" class="headerlink" title="5.2  一对多"></a>5.2  一对多</h4><blockquote>
<p>与刚才一样，对于老师而言，每个老师对应多个学生，现在要求：</p>
<blockquote>
<p>查询当前老师的信息，与他教的所有学生的信息</p>
</blockquote>
</blockquote>
<p>数据库学生表与老师表不变。</p>
<p>实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coderzoe.entity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yhs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/28 21:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewStudent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tid;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NewStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;NewStudent&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, tid=&quot;</span> + tid +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTid</span><span class="params">(<span class="keyword">int</span> tid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tid = tid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coderzoe.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yhs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/28 21:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewTeacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; studentList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NewTeacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;NewTeacher&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, studentList=&quot;</span> + studentList +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getStudentList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudentList</span><span class="params">(List&lt;Student&gt; studentList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.studentList = studentList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Dao层接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coderzoe.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.coderzoe.entity.NewTeacher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yhs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/26 20:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TeacherMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;NewTeacher&gt; <span class="title">getNewTeacher</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>xml实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;studentsAndTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.coderzoe.entity.NewTeacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;studentList&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;ArrayList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.coderzoe.entity.NewStudent&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getStudents&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getNewTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentsAndTeacher&quot;</span>&gt;</span></span><br><span class="line">        select * from teacher</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.coderzoe.entity.NewStudent&quot;</span>&gt;</span></span><br><span class="line">        select * from student where tid = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findNewTeachers</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtil.getSqlSession();</span><br><span class="line">    TeacherMapper mapper = sqlSession.getMapper(TeacherMapper.class);</span><br><span class="line">    List&lt;NewTeacher&gt; newTeacher = mapper.getNewTeacher();</span><br><span class="line">    System.out.println(newTeacher);</span><br><span class="line">    MybatisUtil.closeSqlSession();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到与刚才的一对多基本一样，唯一的不同是刚才的<resultMap>标签里使用的是<association>现在我们使用的是 <collection>。因为刚才每一个学生对应一个老师，现在每一个老师对应多个学生，Teacher对象里的student属性是集合，不再是对象。<collection>标签的<code>ofType</code>属性指的是当前集合元素的类型。</p>
<p>当然，这里也可以用方法二：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;studentsAndTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.coderzoe.entity.NewTeacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;studentList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.coderzoe.entity.NewStudent&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getNewTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentsAndTeacher&quot;</span>&gt;</span></span><br><span class="line">    select s.id sid, s.name sname,t.name tname, t.id tid from student s,teacher t</span><br><span class="line">    where s.tid = t.id;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-3-resultMap"><a href="#5-3-resultMap" class="headerlink" title="5.3 resultMap"></a>5.3 resultMap</h4><p>上面我们已经使用了<resultMap>标签，可以看到这个标签的核心作用是将Mybatis无法转化的<strong>对象-数据库</strong>映射，自己手动映射。我们都知道，框架的实现底层都是反射，Mybatis也一样，在你用Mybatis自动实现ORM的时候，Mybatis会按数据库的字段名查找，找到实体类的属性名一样的，一样的则匹配，否则匹配不上。在实际开发中，我们往往数据库字段名与实体类属性变量名并不一致，这时就需要手动映射。</p>
<p>数据库表：</p>
<p><img data-src="C:\Users\90617\AppData\Roaming\Typora\typora-user-images\image-20200623142204939.png" alt="image-20200623142204939"></p>
<p>实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coderzoe.entity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yhs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/22 20:57</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String familyName;</span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;UserInfo&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, familyName=&#x27;&quot;</span> + familyName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, firstName=&#x27;&quot;</span> + firstName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFamilyName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> familyName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFamilyName</span><span class="params">(String familyName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.familyName = familyName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> firstName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirstName</span><span class="params">(String firstName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Dao层接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coderzoe.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.coderzoe.entity.UserInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yhs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/22 20:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserInfoMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;UserInfo&gt; <span class="title">getAllUserInfo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>xml实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.coderzoe.entity.UserInfo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;family_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;familyName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;first_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;firstName&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 也可以通过setting设置开启驼峰转化 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserInfo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.coderzoe.entity.UserInfo&quot;</span>&gt;</span></span><br><span class="line">    select * from user_info</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserList</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtil.getSqlSession();</span><br><span class="line">    UserInfoMapper mapper = sqlSession.getMapper(UserInfoMapper.class);</span><br><span class="line">    List&lt;UserInfo&gt; allUserInfo = mapper.getAllUserInfo();</span><br><span class="line">    System.out.println(allUserInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但在实际开发中，Java一般都是驼峰式命名，而数据库也都是下划线分隔开的，我们总不能每一个实体类都自己转化，那和使用JDBC也差不多了。好在Mybatis配置文件有一个设置，开启驼峰转化后，就不再需要我们自己手动匹配。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置开启驼峰 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="6-使用注解开发"><a href="#6-使用注解开发" class="headerlink" title="6. 使用注解开发"></a>6. 使用注解开发</h3><p>xml里一些简单的sql语句，我们也可以用注解进行开发。</p>
<p>比如之前的User对象，只是一些简单的增删改查，我们可以用注解来实现，不再需要xml。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coderzoe.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.coderzoe.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yhs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/19 22:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> User的Dao层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用注解开发</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@data</span>: 2020/05/26 17:38</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span>: yhs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: &#123;<span class="doctag">@link</span> User &#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>:  有多个参数 需要<span class="doctag">@Param</span>注解</span></span><br><span class="line"><span class="comment">     *                <span class="doctag">@Param</span>注解也可以用在xml中 换句话说 多个参数 可以在Mapper里写<span class="doctag">@param</span>注解 然后在xml里使用注解 这样就不用传参map了</span></span><br><span class="line"><span class="comment">     *                sql语句中的#&#123;id&#125; #&#123;name&#125; 要求与<span class="doctag">@param</span>注解的名字一样</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where id = #&#123;id&#125; and name = #&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">getUserByIdAndName</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span><span class="keyword">long</span> id,<span class="meta">@Param(&quot;name&quot;)</span>String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user(id,name,password) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertUser3</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update user set name = #&#123;name&#125;,password = #&#123;password&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">long</span> id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="7-Mybatis缓存"><a href="#7-Mybatis缓存" class="headerlink" title="7. Mybatis缓存"></a>7. Mybatis缓存</h3><h3 id="9-Mybatis核心配置文件"><a href="#9-Mybatis核心配置文件" class="headerlink" title="9. Mybatis核心配置文件"></a>9. Mybatis核心配置文件</h3><p>Mybatis配置信息</p>
<blockquote>
<p>configuration（配置）<br>properties（属性）<br>settings（设置）<br>typeAliases（类型别名）<br>typeHandlers（类型处理器）<br>objectFactory（对象工厂）<br>plugins（插件）<br>environments（环境配置）<br>environment（环境变量）<br>transactionManager（事务管理器）<br>dataSource（数据源）<br>databaseIdProvider（数据库厂商标识）<br>mappers（映射器）</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">objectFactory</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">objectFactory</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">databaseIdProvider</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">databaseIdProvider</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-1-properties"><a href="#3-1-properties" class="headerlink" title="3.1 properties"></a>3.1 properties</h4><p>通过properties属性来引入配置文件，这样就可以只改动相关配置文件，不用改动Mybatis配置。</p>
<p>创建db.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/smbms?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>

<p>更改Mybatis配置信息</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql_developer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql_developer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;jdbc&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;pooled&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样我们以后只需要更改db.properties文件中的信息即可。</p>
<h4 id="3-2-typeAliases"><a href="#3-2-typeAliases" class="headerlink" title="3.2 typeAliases"></a>3.2 typeAliases</h4><p>在我们写的mapper.xml中可以看到，当我们传参或返回为实体类时，<strong>resultType/parameterType</strong>往往是包名加类名，这样如果包名过深，或者类名过于不好辨识，我们能不能取一个别名呢？用这个别名代替包名+类名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.coderzoe.entity.User&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;long&quot;</span>&gt;</span></span><br><span class="line">    select * from smbms.user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当然可以！typeAliases标签就是做这个的。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.coderzoe.entity.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;yhs&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;yhs&quot;</span>&gt;</span></span><br><span class="line">    select * from smbms.user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>除此以外，typeAliases还可以指定包名，Mybatis 会在包名下面搜索需要的 Java Bean，在没有注解的情况下，此时默认的别名就是类名(但首字母会小写)，若有注解，则别名为其注解值。 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.coderzoe.entity&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select * from smbms.user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-settings"><a href="#3-3-settings" class="headerlink" title="3.3 settings"></a>3.3 settings</h4><p>Mybatis settings标签内容非常多，主要提供的是一些Mybatis的配置，下面附上官方文档的详细信息</p>
<table>
<thead>
<tr>
<th>设置名</th>
<th>描述</th>
<th>有效值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>cacheEnabled</td>
<td>全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</td>
<td>true| false</td>
<td>true</td>
</tr>
<tr>
<td>lazyLoadingEnabled</td>
<td>延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 <code>fetchType</code> 属性来覆盖该项的开关状态。</td>
<td>true | fase</td>
<td>false</td>
</tr>
<tr>
<td>aggressiveLazyLoading</td>
<td>开启时，任一方法的调用都会加载该对象的所有延迟加载属性。 否则，每个延迟加载属性会按需加载（参考 <code>lazyLoadTriggerMethods</code>)。</td>
<td>true | false</td>
<td>false（3.4.1 及之前的版本中默认为 true）</td>
</tr>
<tr>
<td>multipleResultSetsEnabled</td>
<td>是否允许单个语句返回多结果集（需要数据库驱动支持）。</td>
<td>true | false</td>
<td>true</td>
</tr>
<tr>
<td>useColumnLabel</td>
<td>使用列标签代替列名。实际表现依赖于数据库驱动，具体可参考数据库驱动的相关文档，或通过对比测试来观察。</td>
<td>true | false</td>
<td>true</td>
</tr>
<tr>
<td>useGeneratedKeys</td>
<td>允许 JDBC 支持自动生成主键，需要数据库驱动支持。如果设置为 true，将强制使用自动生成主键。尽管一些数据库驱动不支持此特性，但仍可正常工作（如 Derby）。</td>
<td>true | false</td>
<td>False</td>
</tr>
<tr>
<td>autoMappingBehavior</td>
<td>指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示关闭自动映射；PARTIAL 只会自动映射没有定义嵌套结果映射的字段。 FULL 会自动映射任何复杂的结果集（无论是否嵌套）。</td>
<td>NONE, PARTIAL, FULL</td>
<td>PARTIAL</td>
</tr>
<tr>
<td>autoMappingUnknownColumnBehavior</td>
<td>指定发现自动映射目标未知列（或未知属性类型）的行为。<br /><code>NONE</code>: 不做任何反应<br /><code>WARNING</code>: 输出警告日志（<code>&#39;org.apache.ibatis.session.AutoMappingUnknownColumnBehavior&#39;</code> 的日志等级必须设置为 <code>WARN</code>）<br /><code>FAILING</code>: 映射失败 (抛出 <code>SqlSessionException</code>)</td>
<td>NONE, WARNING, FAILING</td>
<td>NONE</td>
</tr>
<tr>
<td>defaultExecutorType</td>
<td>配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（PreparedStatement）； BATCH 执行器不仅重用语句还会执行批量更新。</td>
<td>SIMPLE REUSE BATCH</td>
<td>SIMPLE</td>
</tr>
<tr>
<td>defaultStatementTimeout</td>
<td>设置超时时间，它决定数据库驱动等待数据库响应的秒数。</td>
<td>任意正整数</td>
<td>未设置 (null)</td>
</tr>
<tr>
<td>defaultFetchSize</td>
<td>为驱动的结果集获取数量（fetchSize）设置一个建议值。此参数只可以在查询设置中被覆盖。</td>
<td>任意正整数</td>
<td>未设置 (null)</td>
</tr>
<tr>
<td>defaultResultSetType</td>
<td>指定语句默认的滚动策略。（新增于 3.5.2）</td>
<td>FORWARD_ONLY | SCROLL_SENSITIVE | SCROLL_INSENSITIVE | DEFAULT（等同于未设置）</td>
<td>未设置 (null)</td>
</tr>
<tr>
<td>safeRowBoundsEnabled</td>
<td>是否允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false。</td>
<td>true | false</td>
<td>False</td>
</tr>
<tr>
<td>safeResultHandlerEnabled</td>
<td>是否允许在嵌套语句中使用结果处理器（ResultHandler）。如果允许使用则设置为 false。</td>
<td>true | false</td>
<td>True</td>
</tr>
<tr>
<td>mapUnderscoreToCamelCase</td>
<td>是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。</td>
<td>true | false</td>
<td>False</td>
</tr>
<tr>
<td>localCacheScope</td>
<td>MyBatis 利用本地缓存机制（Local Cache）防止循环引用和加速重复的嵌套查询。 默认值为 SESSION，会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地缓存将仅用于执行语句，对相同 SqlSession 的不同查询将不会进行缓存。</td>
<td>SESSION | STATEMENT</td>
<td>SESSION</td>
</tr>
<tr>
<td>jdbcTypeForNull</td>
<td>当没有为参数指定特定的 JDBC 类型时，空值的默认 JDBC 类型。 某些数据库驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。</td>
<td>JdbcType 常量，常用值：NULL、VARCHAR 或 OTHER。</td>
<td>OTHER</td>
</tr>
<tr>
<td>lazyLoadTriggerMethods</td>
<td>指定对象的哪些方法触发一次延迟加载。</td>
<td>用逗号分隔的方法列表。</td>
<td>equals,clone,hashCode,toString</td>
</tr>
<tr>
<td>defaultScriptingLanguage</td>
<td>指定动态 SQL 生成使用的默认脚本语言。</td>
<td>一个类型别名或全限定类名。</td>
<td>org.apache.ibatis.scripting.xmltags.XMLLanguageDriver</td>
</tr>
<tr>
<td>defaultEnumTypeHandler</td>
<td>指定 Enum 使用的默认 <code>TypeHandler</code> 。（新增于 3.4.5）</td>
<td>一个类型别名或全限定类名。</td>
<td>org.apache.ibatis.type.EnumTypeHandler</td>
</tr>
<tr>
<td>callSettersOnNulls</td>
<td>指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这在依赖于 Map.keySet() 或 null 值进行初始化时比较有用。注意基本类型（int、boolean 等）是不能设置成 null 的。</td>
<td>true | false</td>
<td>false</td>
</tr>
<tr>
<td>returnInstanceForEmptyRow</td>
<td>当返回行的所有列都是空时，MyBatis默认返回 <code>null</code>。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集（如集合或关联）。（新增于 3.4.2）</td>
<td>true | false</td>
<td>false</td>
</tr>
<tr>
<td>logPrefix</td>
<td>指定 MyBatis 增加到日志名称的前缀。</td>
<td>任何字符串</td>
<td>未设置</td>
</tr>
<tr>
<td>logImpl</td>
<td>指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td>
<td>SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING</td>
<td>未设置</td>
</tr>
<tr>
<td>proxyFactory</td>
<td>指定 Mybatis 创建可延迟加载对象所用到的代理工具。</td>
<td>CGLIB | JAVASSIST</td>
<td>JAVASSIST （MyBatis 3.3 以上）</td>
</tr>
<tr>
<td>vfsImpl</td>
<td>指定 VFS 的实现</td>
<td>自定义 VFS 的实现的类全限定名，以逗号分隔。</td>
<td>未设置</td>
</tr>
<tr>
<td>useActualParamName</td>
<td>允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 <code>-parameters</code> 选项。（新增于 3.4.1）</td>
<td>true | false</td>
<td>true</td>
</tr>
<tr>
<td>configurationFactory</td>
<td>指定一个提供 <code>Configuration</code> 实例的类。 这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。 这个类必须包含一个签名为<code>static Configuration getConfiguration()</code> 的方法。（新增于 3.2.3）</td>
<td>一个类型别名或完全限定类名。</td>
<td>未设置</td>
</tr>
<tr>
<td>shrinkWhitespacesInSql</td>
<td>Removes extra whitespace characters from the SQL. Note that this also affects literal strings in SQL. (Since 3.5.5)</td>
<td>true | false</td>
<td>false</td>
</tr>
</tbody></table>
<p><strong>常用配置：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置开启驼峰 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置日志 需要导入LOG4J的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-4-mappers"><a href="#3-4-mappers" class="headerlink" title="3.4 mappers"></a>3.4 mappers</h4><p>在mappers下将我们写的mapper.xml文件进行注册绑定</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/coderzoe/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里其实有多种绑定方法</p>
<ul>
<li><ol>
<li><p>通过resource绑定xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/coderzoe/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过class绑定Dao层接口</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.coderzoe.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注：用这种方法有两点注意内容：</strong></p>
<ul>
<li>xml配置文件要和接口名称保持一致</li>
<li>xml配置文件要和接口在同一个包下</li>
</ul>
</li>
<li><p>使用扫描包进行注入绑定</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.coderzoe.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个的好处是不用每次写完一个xml文件都在mappers下进行注册，注册一个包，那这个包下的所有mapper都会被注册。<strong>但也需要注意问题，注意的问题点与2相同</strong></p>
<p><strong>注：用这种方法有两点注意内容：</strong></p>
<ul>
<li>xml配置文件要和接口名称保持一致</li>
<li>xml配置文件要和接口在同一个包下</li>
</ul>
</li>
</ol>
</li>
</ul>
<h2 id="Mybatis-Plus"><a href="#Mybatis-Plus" class="headerlink" title="Mybatis-Plus"></a>Mybatis-Plus</h2><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><p><strong>Mybatis官方中文文档：</strong><span class="exturl" data-url="aHR0cHM6Ly9teWJhdGlzLm9yZy9teWJhdGlzLTMvemgvaW5kZXguaHRtbA==">https://mybatis.org/mybatis-3/zh/index.html<i class="fa fa-external-link-alt"></i></span> </p>
<p><strong>Mybatis源码(中文注释)：</strong><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3R1Z3VhbmdxdWFuL215YmF0aXM=">https://github.com/tuguangquan/mybatis<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring整合Mybais</title>
    <url>/2020/08/06/Spring%E6%95%B4%E5%90%88Mybais/</url>
    <content><![CDATA[<blockquote>
<p>市面上常用框架SSM，指的是Spring,SpringMvc和Mybatis。<br>Spring的特性是控制反转，所以我们需要将Mybatis整合进Spring。</p>
</blockquote>
<a id="more"></a> 

<h1 id="Spring整合Mybais"><a href="#Spring整合Mybais" class="headerlink" title="Spring整合Mybais"></a>Spring整合Mybais</h1><h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2><p><strong>创建Mybatis的步骤</strong></p>
<blockquote>
<ul>
<li><ol>
<li><p>导入Mybatis依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
</li>
</ul>
<ul>
<li><ol start="2">
<li><p>编写Mybatis核心配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置开启驼峰 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--   开启全局缓存 默认值是true    --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql_developer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql_developer&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;jdbc&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;pooled&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/coderzoe/mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/smbms?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
</li>
</ul>
<ul>
<li><ol start="3">
<li><p>编写Mybatis工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coderzoe.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yhs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/7 9:31</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;SqlSession&gt; sessionThreadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MybatisUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = sessionThreadLocal.get();</span><br><span class="line">        <span class="keyword">if</span>(sqlSession==<span class="keyword">null</span>)&#123;</span><br><span class="line">            sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">            <span class="comment">//设置事务自动提交 默认是false</span></span><br><span class="line"><span class="comment">//            sqlSession = sqlSessionFactory.openSession(true);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = sessionThreadLocal.get();</span><br><span class="line">        <span class="keyword">if</span>(sqlSession!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            sqlSession.close();</span><br><span class="line">            sessionThreadLocal.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
</li>
</ul>
<ul>
<li><ol start="4">
<li><p>编写实体类与实体类的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coderzoe.entity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yhs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/7 9:28</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coderzoe.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.coderzoe.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yhs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/7 9:54</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
</li>
</ul>
<ul>
<li><ol start="5">
<li><p>编写UserMapper.xml 实现接口</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.coderzoe.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.coderzoe.entity.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
</li>
</ul>
<ul>
<li><ol start="6">
<li><p>编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.coderzoe.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.coderzoe.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.coderzoe.utils.MybatisUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yhs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/7 9:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; users = mapper.getUsers();</span><br><span class="line">        System.out.println(users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
</blockquote>
<p>通过上述几步我们实现了使用Mybatis来做增删改查。</p>
<p>总结一下为：</p>
<ul>
<li><p>1.获得数据源，配置JDBC。</p>
</li>
<li><p>2.配置Mybatis，如别名，开启驼峰缓存等等设置。</p>
</li>
<li><p>3.编写Mybatis工具，主要包括</p>
<blockquote>
<ul>
<li>将Mybatis配置文件导入，得到SqlSessionFactory类。</li>
<li>通过SqlSessionFactory类得到SqlSession类。SqlSession类是我们操作Mybatis的基础。</li>
</ul>
</blockquote>
</li>
<li><p>4.通过XML映射，实现Dao层接口的核心业务函数</p>
</li>
</ul>
<h2 id="Spring整合Mybatis"><a href="#Spring整合Mybatis" class="headerlink" title="Spring整合Mybatis"></a>Spring整合Mybatis</h2><p>Spring整合Mybatis就是将Mybatis核心配置文件交由Spring配置文件来配置，同时将我们的SqlSessionFactory与SqlSession，交由Spring来管理(IOC)</p>
<blockquote>
<ul>
<li><ol>
<li>导入依赖</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- Spring操作JDBC的话，需要一个SpringJDBC包 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><ol start="2">
<li>编写Spring配置文件，整合Mybatis</li>
</ol>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;GBK&quot;?&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 通过Spring配置数据库的数据源 Spring-jdbc --&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 这里所作的工作是替换mybatis-config.xml里的配置，通过Spring的dataSource来连接数据源 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/smbms?useSSL=false<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 这里是获得SqlSessionFactory 通过将上一步的datasource引进来，创建SqlSessionFactory --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 他对应的代码为Mybatis工具类里的</span></span><br><span class="line"><span class="comment">          String resource = &quot;mybatis-config.xml&quot;;</span></span><br><span class="line"><span class="comment">          InputStream inputStream = Resources.getResourceAsStream(resource);</span></span><br><span class="line"><span class="comment">          sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 通过上一步得到的SqlSessionFactory 构造我们的sqlSession类 --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 他对应我们代码的</span></span><br><span class="line"><span class="comment">          sqlSession = sqlSessionFactory.openSession();</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.coderzoe&quot;</span>/&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面的配置文件主要做了三件事：</p>
<blockquote>
<ol>
<li>通过SpringJDBC 创建dataSource(数据源)，替换掉了Mybatis核心配置文件的<strong>environment</strong>标签里的内容</li>
<li>将SqlSessionFactoryBean(即我们Mybatis的SqlSessionFactory)类注入Spring容器。其中SqlSessionFactoryBean类需要指定一个数据源，也即我们上一步连接JDBC的数据源。另外，SqlSessionFactoryBean类还可以导入之前Mybatis的核心配置文件(主要是一些settings或typeAliases 当然还可以放Mappers) 但其实这些都可以在SqlSessionFactoryBean中进行配置，也即可以完全抛弃之前的mybatis-config.xml配置文件。但为了避免耦合性，我还是保留了Mybatis的配置文件，但让他只做一些Mybatis的个性化配置。</li>
<li>将SqlSessionTemplate(即我们Mybatis的SqlSession)类注入Spring中，SqlSessionTemplate类的注入必须指出一个包含SqlSessionFactory的初始化，且只能构造器注入，也不难理解，因为我们之前在Mybatis中得到SqlSession也是通过sqlSessionFactory.openSession()</li>
</ol>
</blockquote>
<ul>
<li><ol start="3">
<li>编写Mybatis核心配置文件</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br></pre></td></tr></table></figure>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
       "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
 <settings>
     <!-- 配置开启驼峰 -->
     <setting name="mapUnderscoreToCamelCase" value="true"/>
     <!-- 配置日志 -->
     <setting name="logImpl" value="STDOUT_LOGGING"/>
     <!--   开启全局缓存 默认值是true    -->
     <setting name="cacheEnabled" value="true"/>
 </settings>
 <mappers>
     <mapper resource="com/coderzoe/dao/UserDao.xml"/>
 </mappers>
</configuration>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> 上面我们说过了，这个xml是可以完全抛弃，完全在Spring里配置的，但为了避免耦合，我们还是保留了他的一些配置。</span><br><span class="line"></span><br><span class="line">&gt;4. 编写实体类，实体类接口，实体类接口实现类与实体类接口对应Mybatis的XML文件</span><br><span class="line"></span><br><span class="line"> &#96;&#96;&#96;java</span><br><span class="line"> package com.coderzoe.entity;</span><br><span class="line"> </span><br><span class="line"> &#x2F;**</span><br><span class="line">  * @author yhs</span><br><span class="line">  * @date 2020&#x2F;6&#x2F;7 10:04</span><br><span class="line">  * @description</span><br><span class="line">  *&#x2F;</span><br><span class="line"> public class User &#123;</span><br><span class="line">     private Long id;</span><br><span class="line">     private String name;</span><br><span class="line">     private String password;</span><br><span class="line"> </span><br><span class="line">     @Override</span><br><span class="line">     public String toString() &#123;</span><br><span class="line">         return &quot;User&#123;&quot; +</span><br><span class="line">                 &quot;id&#x3D;&quot; + id +</span><br><span class="line">                 &quot;, name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">                 &quot;, password&#x3D;&#39;&quot; + password + &#39;\&#39;&#39; +</span><br><span class="line">                 &#39;&#125;&#39;;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     public User() &#123;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     public Long getId() &#123;</span><br><span class="line">         return id;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     public void setId(Long id) &#123;</span><br><span class="line">         this.id &#x3D; id;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     public String getName() &#123;</span><br><span class="line">         return name;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     public void setName(String name) &#123;</span><br><span class="line">         this.name &#x3D; name;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     public String getPassword() &#123;</span><br><span class="line">         return password;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     public void setPassword(String password) &#123;</span><br><span class="line">         this.password &#x3D; password;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coderzoe.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.coderzoe.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yhs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/7 10:28</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.coderzoe.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.coderzoe.entity.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coderzoe.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.coderzoe.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yhs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/7 10:28</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 由于我们之前已经在Spring的xml中注册了sqlSessionTemplate 所有这里直接拿过来用即可。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSessionTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserDao mapper = sqlSessionTemplate.getMapper(UserDao.class);</span><br><span class="line">        <span class="keyword">return</span> mapper.getUsers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，我们比上面直接用Mybatis多了一层UserMapperImpl接口实现类，其实这里的工作是封装了我们之前在Test里做的工作(获得SqlSession，然后执行mapper方法)。这里因为我们已经在Spring配置文件中注入了SqlSessionTemplate 所以这里就直接拿来用即可(又是IOC，自动装配)</p>
</li>
</ul>
<ol start="5">
<li><p>编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.coderzoe.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yhs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/7 10:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        UserDao userMapperImpl = context.getBean(<span class="string">&quot;userMapperImpl&quot;</span>, UserDao.class);</span><br><span class="line">        System.out.println(userMapperImpl.getUsers());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>官方提供了Spring整合Mybatis的另一种实现，其实就是对第一种的一层封装，将SqlSession的创建交给了一个父类SqlSessionDaoSupport，不再需要你创建SqlSession。</p>
<blockquote>
<ul>
<li><ol>
<li><p>编写接口实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coderzoe.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.coderzoe.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.support.SqlSessionDaoSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yhs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/7 13:27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl2</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSessionTemplate sqlSessionTemplate = getSqlSessionTemplate();</span><br><span class="line">        UserDao mapper = sqlSessionTemplate.getMapper(UserDao.class);</span><br><span class="line">        <span class="keyword">return</span> mapper.getUsers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><ol start="2">
<li><p>编写Spring配置类</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;GBK&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 通过Spring配置数据库的数据源 Spring-jdbc --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 这里所作的工作是替换mybatis-config.xml里的配置，通过Spring的dataSource来连接数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/smbms?useSSL=false<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 这里是获得SqlSessionFactory 通过将上一步的datasource引进来，创建SqlSessionFactory --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 他对应的代码为Mybatis工具类里的</span></span><br><span class="line"><span class="comment">            String resource = &quot;mybatis-config.xml&quot;;</span></span><br><span class="line"><span class="comment">            InputStream inputStream = Resources.getResourceAsStream(resource);</span></span><br><span class="line"><span class="comment">            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 将我们的接口实现类注入Spring，然后注入我们的sqlSessionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapperImpl2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.coderzoe.dao.UserMapperImpl2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.coderzoe&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><ol start="3">
<li><p>编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.coderzoe.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yhs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/7 10:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        UserDao userMapperImpl2 = context.getBean(<span class="string">&quot;userMapperImpl2&quot;</span>, UserDao.class);</span><br><span class="line">        System.out.println(userMapperImpl2.getUsers());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
</blockquote>
<p>其实上面的代码还是很好理解的，就是通过SqlSessionDaoSupport对我们的SqlSession做了一层封装。</p>
<p>没封装前我们需要做的：</p>
<blockquote>
<ul>
<li>创建SqlSessionFactory</li>
<li>通过SqlSessionFactory创建SqlSession</li>
<li>将SqlSession注入我们的UserMapperImpl，做增删改查操作。</li>
</ul>
</blockquote>
<p>封装就是将上面的步骤一二整合了一下，封装的实现通过继承SqlSessionDaoSupport父类。</p>
<p>这个父类做的工作就是帮你创建SqlSession，不再需要你自己创建，但我们都知道SqlSession的创建是需要SqlSessionFactory的，所以在Spring的配置文件中，我们注入了SqlSessionFactory</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapperImpl2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.coderzoe.dao.UserMapperImpl2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>那么很多人又要问了，我userMapperImpl2对象没有sqlSessionFactory属性啊，这个property明显是调用的set方法，我没有啊，这怎么调？ 很简单，setSqlSessionFactory()这个方法是你继承的父类SqlSessionDaoSupport里的，我们知道子类继承父类，就是继承了父类的一切东西，所以你的userMapperImpl2自然也是有的。这时你将sqlSessionFactory传给你的继承父类，他用这个sqlSessionFactory给你创造了SqlSession，所以你就可以直接通过getSqlSessionTemplate()得到SqlSession。getSqlSessionTemplate()方法哪来的？当然也是父类里的。</p>
<p>SqlSessionDaoSupport的部分源码：</p>
<p><img data-src="G:\Blog\blog\source_posts\Spring整合Mybais.assets\image-20200607135318859.png" alt="image-20200607135318859"></p>
<p><img data-src="G:\Blog\blog\source_posts\Spring整合Mybais.assets\image-20200607135427520.png" alt="image-20200607135427520"></p>
<p><img data-src="G:\Blog\blog\source_posts\Spring整合Mybais.assets\image-20200607135655047.png" alt="image-20200607135655047"></p>
<p><strong>其实我个人觉得还是上面的方法更好理解，SqlSessionDaoSupport隐藏了SqlSession的创建，反而不太直观，而且代码量并没有少多少。</strong></p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
</search>
